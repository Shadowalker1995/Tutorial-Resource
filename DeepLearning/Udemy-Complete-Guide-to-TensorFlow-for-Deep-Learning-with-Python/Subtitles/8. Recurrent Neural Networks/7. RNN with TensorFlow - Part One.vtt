WEBVTT

00:05.720 --> 00:07.010
Welcome everyone.

00:07.010 --> 00:10.630
Now it's time to actually create the recurrent neural network with tensor flow.

00:10.640 --> 00:13.400
I'll start off with a couple of imports.

00:13.400 --> 00:22.040
Will first important up-I as N.P. then will import sensor flow as T.F. then import that plot lib pipe

00:22.040 --> 00:30.820
plot as PBT pipe plot and then some using Joop or notebook will say at play live in line.

00:31.270 --> 00:37.450
OK now the next step is to actually create a class that will to both initialize the data and also send

00:37.480 --> 00:39.090
batches of the data back.

00:39.130 --> 00:44.170
Right now the next step is to create a class and this class is going to both be able to create the data

00:44.500 --> 00:46.910
and generate batches to send back.

00:47.140 --> 00:47.920
So will do the following.

00:47.920 --> 00:57.060
Will say class time series data and this is just a normal class and it's going to have an in it method

00:57.660 --> 01:03.420
which takes itself and we're going to start it off with the number of points we want to create and then

01:03.420 --> 01:10.180
it's going to have an x min and an X max so let's go ahead and create a couple of attributes here.

01:10.910 --> 01:16.490
Please say X-Men is equal to the X-Men provided same for X max

01:20.640 --> 01:29.250
then all we're gonna do is the same thing for the number of points number of points and then we're also

01:29.250 --> 01:34.620
going to define an attribute called resolution which is just how fine of a resolution are we actually

01:34.620 --> 01:41.340
creating and we can easily calculate that by either the self-taught X Max or the actual x Maxxis provided.

01:41.520 --> 01:49.890
So to kind of save some typing we'll just say X Max minus X-Men divided by the number of points then

01:49.920 --> 02:00.960
will create X data and x data is going to be linearly spaced points using pi from x men to X Max and

02:00.960 --> 02:05.390
we want the number of points provided and then we'll say self-taught.

02:05.560 --> 02:14.240
Why true is equal to the sign self-taught ex-state of.

02:14.310 --> 02:15.950
OK so do we actually have here.

02:16.020 --> 02:22.890
Well so far we have this time series class that takes in the number of points wanted and the x men and

02:22.890 --> 02:27.930
X max and it ends up doing is it creates a bunch of attributes to store some information.

02:27.930 --> 02:30.010
First off those three provided them also.

02:30.150 --> 02:32.780
The resolution then the x data.

02:32.780 --> 02:35.520
So that's a number of linearly spaced points from X-Men.

02:35.520 --> 02:41.970
Tx max and then also white true or white True's just defined as passing in this x data through the number

02:42.060 --> 02:51.190
pi sine function that I'm also going to add in a convenience method called ret.

02:51.220 --> 03:01.300
True for return true and this takes in any series of x values and it's going to return and sign X series

03:01.390 --> 03:04.930
and that's going to be useful for comparing data that we don't have.

03:04.930 --> 03:11.950
So for example if I wanted to know what the true value of any sign of the number 3 was I could then

03:11.950 --> 03:18.190
call this method return true and it will return back and the sign of whatever series I happened to pass

03:18.190 --> 03:18.560
in.

03:18.730 --> 03:20.330
So this is more of just convenience.

03:21.200 --> 03:26.610
Well right now the next method we need to create is going to be actually to generate batches of the

03:26.660 --> 03:28.740
data.

03:28.860 --> 03:35.540
So I'll say the next batch is going to be taking in self and then it's also going to take in the batch

03:35.540 --> 03:42.500
size wanted and then the number of steps and I'm also going to add in this parameter which will see

03:42.620 --> 03:43.830
later what it's for.

03:44.050 --> 03:48.470
But it's called The Return batched time series and I'm going to set it by default equal to false and

03:48.470 --> 03:50.520
as I mentioned we'll see that later on.

03:50.540 --> 03:52.730
So let me comment out the steps that we need to do.

03:52.730 --> 04:03.650
First off we need to grab a random starting point for a well I should say for each batch of data once

04:03.650 --> 04:12.730
I have that I need to convert to be on the actual time series then I'm going to create a batch time

04:12.730 --> 04:29.750
series on the X-axis and then I will create the y data for the time series X axis from previous that

04:32.040 --> 04:37.530
then I'm just going to be formatting it for the recurrent neural network.

04:37.950 --> 04:39.600
OK so let's actually do all this.

04:39.600 --> 04:41.510
So I want to grab a random starting point.

04:41.610 --> 04:50.280
So I was going to say random start as equal to any random Rand and I get a pass in the batch size and

04:50.280 --> 04:54.330
one sort of Moran is just random values in a given shape.

04:55.130 --> 04:57.430
So we'll see later on how we're actually gonna work with that.

04:57.680 --> 05:02.210
So I need to convert this to actually be on the time series because right now this is just some random

05:02.210 --> 05:02.770
number.

05:02.870 --> 05:04.880
I don't know whether or not it's on the time series.

05:05.090 --> 05:09.750
So I'll create another value called Time series start.

05:10.400 --> 05:16.370
And that's going to be equal to random star and I'm going to multiply that by the following.

05:16.370 --> 05:30.360
We're going to multiply that by the x Max minus leps the X-Men minus the number of steps times soft

05:30.850 --> 05:32.960
resolution.

05:33.080 --> 05:38.900
And that's going to basically convert this random star to be somewhere on the actual time series that

05:38.900 --> 05:40.100
we defined earlier.

05:40.280 --> 05:45.490
Because notice here I'm just taking the maximum value then subtracting the minimum value.

05:45.620 --> 05:49.880
So now I have my points that are actually on that time series and then I'm going to subtract the number

05:49.880 --> 05:52.460
of steps multiplied by the resolution.

05:52.490 --> 05:56.370
And that's going to convert this random star to be somewhere in that time series.

05:56.600 --> 05:59.920
Then I need to create a batch time series on the X-axis.

05:59.930 --> 06:01.670
So that's actually a lot easier.

06:02.070 --> 06:05.930
I just say Bache time series.

06:06.070 --> 06:11.170
And then what I'm going to do is say equal to that starting point we just created and then I'm going

06:11.170 --> 06:21.320
to add and points to it we'll say arr. 0 0 2 the number of steps asked for and we'll say plus 1 and

06:21.320 --> 06:27.230
then we're going to multiply that by self-taught resolution so that this has the same resolution as

06:27.760 --> 06:29.030
the points here.

06:29.990 --> 06:32.240
OK then I need to create y data for this.

06:32.240 --> 06:33.670
So this is actually an easier

06:36.250 --> 06:39.390
sign batch time series.

06:39.770 --> 06:40.000
OK.

06:40.010 --> 06:42.080
So let's quickly review what we just did.

06:42.080 --> 06:44.630
First off we essentially create a random starting point.

06:44.750 --> 06:49.370
However we don't know whether or not this random starting point is on the actual time series data because

06:49.370 --> 06:54.260
the time series data was first the final in the initialize this with an X Men in X max and a number

06:54.260 --> 06:55.260
of points.

06:55.280 --> 07:01.370
So we then convert this random start to be on the time series and we do that by multiplying that random

07:01.370 --> 07:08.060
start with the result of the maximum value minus the minimum value minus the number of steps times the

07:08.060 --> 07:08.790
resolution.

07:08.840 --> 07:15.440
And that gives you a starting point on the time series then we need to actually create the x axis batch

07:15.440 --> 07:17.510
of time series information.

07:17.510 --> 07:24.280
So that ends up being that starting point we just decided plus 0 up 2 steps plus 1.

07:24.280 --> 07:28.530
I remember steps is defined right here and then we multiply that by the resolution.

07:28.550 --> 07:35.420
So it's going to be basically this resolution times this arrangement and then we have t start plus these

07:35.420 --> 07:39.380
points and that's our Bachche time series then to convert that to y data.

07:39.380 --> 07:44.630
It's actually quite easy it's just taking the sign of it so that it matches up with our actual function.

07:44.630 --> 07:50.170
Now for formatting for the recurrent neural network it is a little trickier for you to say the following.

07:50.440 --> 07:58.210
I'll say if return Bache TS going to return something.

07:58.230 --> 08:01.590
I was going to comment that out right now because we'll get to that in just a second.

08:01.590 --> 08:05.880
Else I'm going to return and this is what I'm going to do.

08:05.910 --> 08:09.150
I'm going to return why batch

08:13.230 --> 08:21.060
everything along the rows and then along the columns everything up to minus one here and then I'm going

08:21.060 --> 08:27.460
to reshape this to be negative 1 steps 1.

08:27.560 --> 08:31.890
So that's going to be the first item in this tuple that I return back and then I'm going to have y batch

08:33.970 --> 08:40.750
everything along the rows and then one colon that are going to say reshape them is going to be negative

08:40.750 --> 08:44.530
one staps one.

08:44.570 --> 08:46.080
Let me zoom out real quick.

08:46.160 --> 08:52.250
So recall that formatting or data was really important when we were working with the manual or creation

08:52.250 --> 08:53.650
of a recurrent neural network.

08:53.780 --> 08:56.780
And that's essentially what this reshape is doing here.

08:57.050 --> 08:58.180
And that is the batches here.

08:58.220 --> 09:04.310
So we have one batch that's going to represent the time series and this batch which represents the time

09:04.310 --> 09:07.710
series shifted over by one step into the future.

09:07.760 --> 09:10.100
That way we can then train on this data.

09:10.190 --> 09:17.290
So I'm going to then copy this and I will return the same thing here except then I'll have a third item

09:18.540 --> 09:20.470
which is called Bache underscore.

09:20.970 --> 09:26.940
So that's if I actually also want the x axis information which is what this essential boolean value

09:26.940 --> 09:27.810
is for.

09:28.250 --> 09:28.770
OK.

09:28.950 --> 09:33.840
So let's go ahead and quickly review what we did and then we're going to plot this out just so we can

09:33.840 --> 09:35.640
visualize what we actually did.

09:35.640 --> 09:39.990
But basically I had this class called time series data and when you call it you're going to provide

09:39.990 --> 09:45.990
it the number of points you want and the X minimum value you want them on and the X max of all you want

09:45.990 --> 09:46.320
them on.

09:46.320 --> 09:50.960
So it's good to return let's say 50 points between 0 and 1 it's going to set up all its attributes.

09:50.970 --> 09:56.100
Calculate the resolution of what you just asked for and then create the X data and then create the true

09:56.100 --> 10:01.390
data which in our case we're just using the sine function as our white true.

10:01.520 --> 10:07.260
Then we have a convenience method here that for any x series it returns the sign of it.

10:07.560 --> 10:09.150
Then we have our next batch method.

10:09.260 --> 10:13.870
This one is a little more complicated but when you break it down into steps it's not so bad.

10:13.910 --> 10:15.890
We create some random starting point.

10:15.920 --> 10:18.810
We need to make sure that random starting point is on the time series.

10:18.830 --> 10:23.390
So we did this conversion using the X Max X-Men and resolution values.

10:23.390 --> 10:29.390
Then once we have that time series starting point we're going to add on the number of steps asked four

10:29.540 --> 10:36.140
times the resolution so that now has that information so that that's time series then we're going to

10:36.140 --> 10:42.640
create the y values associated with that batch TS which is just passing batched TS into sign here.

10:42.980 --> 10:52.490
Then I have two options if I want to return the Y batch information along with the actual x axis values

10:52.490 --> 10:55.610
that it belongs to are axis values depending on you think about it.

10:55.820 --> 11:02.970
Then I have the time series the time series shifted over by one step and then batched yes.

11:03.260 --> 11:07.280
Otherwise if I just want these two batches then I just return these two tuples.

11:07.280 --> 11:13.800
So again basically here we have this time series and then this time series shifted over by one timestep.

11:14.190 --> 11:19.730
OK so now that we have that let's go ahead and create some data so we can actually visualize what's

11:19.730 --> 11:21.430
happening here.

11:21.470 --> 11:25.830
So we'll say TSA data is equal to time series data.

11:26.060 --> 11:30.530
And let's say I want 250 points between 0 and 10.

11:30.530 --> 11:39.460
So then I'm going to say Piazzi plots plot this time series data and out of this time series data object.

11:39.470 --> 11:42.400
If I hit tab here notice I have all these nice attributes.

11:42.530 --> 11:48.630
So I'm going to plot the X data versus Y true.

11:48.940 --> 11:49.640
And there we have it.

11:49.690 --> 11:53.550
We have our X data versus Y true which is just sign of x.

11:53.680 --> 11:57.430
So that's all we did so far by creating this time series data.

11:57.430 --> 12:02.530
So let's say I want each of my random batches to have 30 steps in it.

12:02.590 --> 12:07.280
So I'll say a number of times that is equal to 30.

12:07.300 --> 12:08.960
So a number of steps in batch.

12:08.980 --> 12:13.220
And we're also going to use this for prediction steps into the future later on.

12:13.240 --> 12:25.210
So I'm going to say why one white two Ts is equal to ts data and then called the next batch.

12:25.390 --> 12:27.370
And I want if we come up here.

12:27.500 --> 12:28.350
What we're going to do.

12:28.580 --> 12:31.660
I'm going to ask for just batch size to be one.

12:31.880 --> 12:36.620
And then I'm also going to ask for steps to be equal to the number of times that we're here.

12:36.620 --> 12:37.940
So I want 30 steps.

12:37.970 --> 12:43.160
I just want one batch and then I'm also going to ask for the Bache time series.

12:43.190 --> 12:45.610
Basically that X data for our plot.

12:45.960 --> 12:52.470
So going to say give me one batch of 30 samples and true.

12:52.500 --> 12:57.700
I do want this time series data that way I can plot it later on since we're not going to use it.

12:57.810 --> 13:05.160
We're going to have the option to just not pass in that parameter that I'm going to say VLT plot.

13:05.630 --> 13:08.780
And well let's look at time series right now if we look at ts.

13:08.890 --> 13:12.230
It's in this array right here where it's a nested array.

13:12.220 --> 13:15.820
So if you take a look at the shape it's one by 31.

13:15.910 --> 13:18.330
So I need to flatten this in order to actually plot it.

13:18.370 --> 13:24.990
So if I flatten it out now I get this as a single one D-Rays if I take a look at the shape.

13:24.990 --> 13:27.380
Now it's just 31 points.

13:27.390 --> 13:29.000
So that's what map plot live needs.

13:29.250 --> 13:30.740
So we're going to be using that.

13:30.870 --> 13:38.850
So I'll say Piazzi the plot and then I'm also going to get white too and white is the same deal and

13:38.970 --> 13:44.940
to flatten it and then I want an asterix here to be the actual points.

13:44.940 --> 13:47.430
Now I'm going to get an error here if I just run this.

13:47.610 --> 13:51.210
And the reason is because hey it's going to say Did I mention don't match up.

13:51.240 --> 13:53.000
So it says one of these is 31.

13:53.040 --> 13:58.160
And one of these is 30 and that makes sense because remember why one in y2 here.

13:58.200 --> 14:02.590
As far as these training batches are concerned they're shifted over one step from each other so they're

14:02.600 --> 14:07.890
each missing a whole step from the 31 possible points.

14:07.890 --> 14:14.780
So what we're going to do then is for it to yes we're just going to say indexing starting from 1 all

14:14.780 --> 14:19.450
the way to the end and then when we plot it we see we have these points right here.

14:19.610 --> 14:24.120
Now because this is randomly chosen You're not going to get the same points I do.

14:24.290 --> 14:26.940
So if I run this again so ask for another batch.

14:27.050 --> 14:29.990
You'll notice I get a different part of that sinusoidal wave.

14:30.230 --> 14:34.820
So keep that in mind every time you run this you're going to be getting different parts of the sign

14:34.940 --> 14:36.010
as your batch.

14:36.020 --> 14:38.790
If you're getting the same part every time then something is wrong.

14:38.850 --> 14:41.210
You're not actually choosing random values here.

14:41.210 --> 14:43.150
So that's a good indicator of something's wrong.

14:43.160 --> 14:48.010
If you keep running these cells you should be constantly getting different segments of the sinewave.

14:48.260 --> 14:50.170
OK so now let's play this out.

14:50.210 --> 15:03.960
On top of our original sinewave so I'll say Piazzi plots TS data X data versus TS data y true and we'll

15:03.960 --> 15:11.360
say we'll get the label to be sign up to you OK.

15:11.550 --> 15:14.020
So remember that's just this plot right here.

15:14.370 --> 15:19.820
And if I say at the very end the legend that I end up seeing sign of T.

15:19.920 --> 15:23.190
So now let's go ahead and plot these random points that we just made.

15:23.190 --> 15:24.570
So that little batch.

15:24.690 --> 15:27.230
So I'll say the following will say Piazzi plot.

15:27.780 --> 15:32.050
And I'm going to take T.S. flatten that I can just copy this right here.

15:32.190 --> 15:42.190
He is fighting to flatten and then the Strix So let's grab that and then we're going to say label is

15:42.190 --> 15:47.080
equal to single training instance

15:50.260 --> 15:53.100
run that and you can see here there's a single training instance.

15:53.140 --> 15:59.520
And if this legend is kind of blocking your view you can use a little peel tea.

16:00.010 --> 16:06.930
Well at the very end of the cell you can use Piazzi Titely run that and that shift shifted over and

16:06.930 --> 16:08.550
nothing's blocking anymore.

16:08.560 --> 16:08.880
All right.

16:08.890 --> 16:12.480
So if you were to keep running this you should constantly be getting new points.

16:12.480 --> 16:14.060
So now look where this curve is.

16:14.080 --> 16:16.590
So if I run this again I now see I grabbed.

16:16.630 --> 16:17.880
This is my batch.

16:17.890 --> 16:23.170
So what we're going to be doing is randomly grabbing two batches and they're shifted over from one another

16:23.500 --> 16:29.030
which is why when we came back up here we ended up saying steps plus one here.

16:29.080 --> 16:34.170
So that way when I asked for 31 each of these batches has 30 themselves.

16:34.170 --> 16:34.640
OK.

16:34.870 --> 16:37.080
So that's it for the data.

16:37.200 --> 16:41.740
Well we're now going to show you is the training instance and what we're actually trying to predict.

16:41.740 --> 16:46.510
So remember we are trying to predict a time series shifted over by one timestep.

16:46.510 --> 16:49.180
So let me visualize that real quick.

16:49.390 --> 16:52.840
So we're going to say training data.

16:52.960 --> 16:55.380
What this actually looks like.

16:55.480 --> 17:07.940
So let me create a training instance will say and PLN space five to well say five plus Test Data resolution

17:09.590 --> 17:10.790
and we'll have this be.

17:10.850 --> 17:16.070
Well have this resolution be multiplied by the number of times that's wanted plus 1.

17:16.850 --> 17:22.420
And then the second parameter here in space is going to be the number of times that's a number of times

17:22.420 --> 17:25.470
that's plus 1.

17:25.750 --> 17:27.880
So what does this training instance actually look like.

17:27.880 --> 17:30.460
It's just a bunch of values here.

17:30.470 --> 17:35.840
So then what we're going to do is say PLCC and we'll say title

17:38.880 --> 17:40.170
training instance.

17:40.170 --> 17:44.450
So this is the actual data we're going to be feeding in our model and we're training it and I'm going

17:44.450 --> 17:54.380
to plot out the training instance called negative 1 and then test data.

17:54.450 --> 17:57.480
I'm going to ask to return the true values.

17:57.570 --> 18:00.030
So that's why we have that convenience method there.

18:00.570 --> 18:05.380
Train instance colon negative 1.

18:05.510 --> 18:11.230
And then what we're going to say here is we'll have these b b zero or B.

18:11.240 --> 18:12.260
Oh excuse me.

18:12.350 --> 18:17.030
So it's going to be a little black thoughts and we're going to say marker size.

18:17.030 --> 18:19.280
This is just for visualization purposes now.

18:19.460 --> 18:29.980
Make these marks eyes 15 and the alpha is going to be 0.5 and let's give this a label of instance.

18:30.120 --> 18:33.290
OK so that's our training instances go ahead and plot it out.

18:34.220 --> 18:34.580
OK.

18:34.650 --> 18:37.830
So that's actually blue not black Sorry black is OK.

18:38.000 --> 18:39.440
So here's our training instance.

18:39.440 --> 18:46.520
So we just created a training instance so again we just linearly spaced from five to five plus the data

18:46.520 --> 18:47.300
resolution here.

18:47.300 --> 18:52.700
So 5 up to 6.2 So 30 times steps forward from five.

18:52.850 --> 18:56.760
Then we have Kilty training instance and we're plotting out this training instance.

18:56.760 --> 18:57.380
All right.

18:57.560 --> 19:03.380
So then we're going to want to predict one time step ahead of this so we're going to predict an entire

19:03.380 --> 19:05.270
series shifted over by one step.

19:05.450 --> 19:09.780
So I'm going to essentially mimic that by doing the following.

19:09.800 --> 19:21.440
We'll say train instance one colon now and then we'll say TSA data return true of train instance one

19:21.440 --> 19:30.460
colon and then very similar thing here will say oh for a black thought will make this market size a

19:30.460 --> 19:31.570
little smaller.

19:31.570 --> 19:33.080
You can change the colors if you want.

19:33.550 --> 19:37.960
And those say labels equal to target.

19:38.350 --> 19:40.820
OK so what is actually happening here.

19:40.870 --> 19:43.620
Let me pass in the legend so we can see it.

19:45.050 --> 19:45.940
Kilty Legin.

19:46.130 --> 19:48.580
So I have my instance and I have my target.

19:48.830 --> 19:53.780
So the blue is what is going to be the training here.

19:53.990 --> 19:56.260
And then the black is the actual target.

19:56.270 --> 20:02.750
So essentially the model is asked given these blue points can you generate these black points and you

20:02.750 --> 20:09.560
should imagine that it's relatively easy to generate the points that should be exactly the same as the

20:09.560 --> 20:10.780
points that you were fed.

20:10.790 --> 20:16.130
The harder one is this point right here because technically you weren't given any data at that particular

20:16.150 --> 20:16.790
x.

20:16.790 --> 20:23.330
Now as you train the model you'll see that later on is actually not super simple to get the points that

20:23.330 --> 20:28.220
you were actually given technically the correct answer to because of the way the recurrent neurons actually

20:28.220 --> 20:34.490
work but this is the general idea given these blue points as a series can you generate these black points

20:34.490 --> 20:35.140
in the series.

20:35.180 --> 20:39.510
So shifted over one time step and that is the whole purpose of our model.

20:39.530 --> 20:43.970
So coming up in the next lecture we're going to end up creating their model and running some more current

20:43.970 --> 20:46.910
neural networks and then running the session.

20:47.190 --> 20:49.280
Okay thanks everyone and I'll see you at the next lecture.
