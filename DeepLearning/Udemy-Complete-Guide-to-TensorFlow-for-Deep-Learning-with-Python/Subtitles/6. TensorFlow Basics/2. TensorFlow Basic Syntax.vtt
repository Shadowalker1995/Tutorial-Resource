WEBVTT

00:05.270 --> 00:10.580
Welcome everyone to this lecture on tents or flow basic syntax here we're going to learn the very basics

00:10.580 --> 00:11.290
of tensor flow.

00:11.290 --> 00:16.750
We'll start off by actually creating tensors just constant tensors and then we'll go into computations

00:16.820 --> 00:18.850
and then running a session intenser flow.

00:18.860 --> 00:21.160
Let's open up a Jupiter notebook and get started.

00:21.530 --> 00:21.890
All right.

00:21.890 --> 00:24.710
First thing we're going to do is import tensor flow.

00:25.340 --> 00:29.120
We're already pretty far into the course but now is the very first time we actually get to use tensor

00:29.120 --> 00:29.920
flow.

00:30.410 --> 00:32.490
And just to make sure you're using the same version.

00:32.510 --> 00:34.130
I am in the environment file.

00:34.130 --> 00:35.910
Go ahead and run this line right here.

00:36.050 --> 00:39.430
Print T.F. underscore underscore version underscore underscore.

00:39.560 --> 00:42.830
And it should have some variation of 1.3.

00:42.920 --> 00:47.590
So it doesn't matter if it says point 0 here at the end of that mixture using terms flow 1.3.

00:47.600 --> 00:50.180
Future versions like 1.4 and 1.5.

00:50.240 --> 00:53.000
They may have very small slight syntax changes.

00:53.030 --> 00:58.070
So since we are just learning tensor for and I don't want you to get hung up on small syntax changes

00:58.400 --> 01:00.400
go ahead and make sure using 1.3.

01:00.410 --> 01:04.790
Then once you fully understand tensor flow you can easily go on to a more updated version.

01:04.820 --> 01:08.950
In case you're watching this in the future let's start off by actually creating a tensor.

01:09.170 --> 01:13.750
So the word tensor it's basically just a fancy word for an end dimensional array.

01:13.850 --> 01:18.290
We'll start off by creating the most basic tensors possible and that is a constant.

01:18.350 --> 01:24.400
So I'm going to create a variable called hello and we'll say T.F. constant.

01:24.610 --> 01:26.530
I'm going to pass in a string here.

01:26.740 --> 01:31.180
We'll say hello and then I can actually have a space at the end and then I'm going to create another

01:31.190 --> 01:32.190
constant here.

01:32.220 --> 01:34.460
We'll call it world.

01:34.480 --> 01:40.180
It's also going to be T.F. dot constant and this will be as you may have guessed the string world.

01:40.750 --> 01:45.160
So if I take a look at what type of object this is it is not a String object.

01:45.160 --> 01:47.960
It is a tensor flow Python 3 ops.

01:47.980 --> 01:48.890
And then we have tensor.

01:48.910 --> 01:50.710
So this by itself is very Laury.

01:50.710 --> 01:53.140
Here is a tensor object.

01:53.140 --> 01:58.910
So as you may have guessed if I try to print the variable Hello I am not going to get a string.

01:58.930 --> 02:01.290
Instead it's going to say hey this is a tensor.

02:01.300 --> 02:05.460
It's a constant blah blah the data type inside of this tensor is a string.

02:05.470 --> 02:10.040
It's not actually going to print out the word hello in order to actually get hello to print.

02:10.110 --> 02:15.370
What we need to do is run this sort of operation inside of a session just like we did in our previous

02:15.430 --> 02:16.890
manual neural network.

02:16.900 --> 02:24.370
So the way we actually create a tensor flow session is with the following command we say with Ts dot

02:25.550 --> 02:31.860
session open and close parentheses as s e s s colon.

02:32.050 --> 02:37.210
And then you can have a block of code here indented and everything here inside of this or is just going

02:37.210 --> 02:37.780
to be.

02:37.780 --> 02:39.590
Flow operations that you run.

02:39.640 --> 02:44.680
And the reason we use this keyword with is because that makes sure that we don't have to actually close

02:44.680 --> 02:45.300
the session.

02:45.310 --> 02:46.810
So this kind of automatically opens.

02:46.810 --> 02:50.350
It runs the block of code and then closes the session.

02:50.350 --> 02:58.020
Let's go ahead and do a simple run command so say s e s s that run.

02:58.600 --> 03:00.430
And then I can create an operation here.

03:00.430 --> 03:05.850
So let's do a concatenation operation basically Hello Plus world.

03:05.920 --> 03:06.930
So we're going to run that.

03:07.150 --> 03:09.840
And since I actually didn't save it as a result let's run this again.

03:09.860 --> 03:18.220
But assign it to result and then outside of the session I can then print the result and it says hello

03:18.310 --> 03:20.350
world.

03:20.440 --> 03:24.910
And if you're wondering what this be represents right in front of the string it just represents in Python

03:24.910 --> 03:27.950
3 that this is a bytes literal.

03:28.290 --> 03:29.110
OK.

03:29.140 --> 03:33.780
And for our purposes we don't really need to concern ourselves too much with this be continuing on.

03:33.790 --> 03:37.690
Let's go ahead and explore the more basics of tensor flow.

03:37.870 --> 03:39.730
Let's perform another computation.

03:39.750 --> 03:41.340
Let's do something like addition.

03:41.350 --> 03:48.510
So I'm going to say is equal to C-f constants and I'm going to put a number here like 10.

03:48.580 --> 03:51.470
We're going to create another constant T.F. constants.

03:51.790 --> 03:57.830
Let's put 20 and then again if I checked the type of a it again is just a tensor.

03:58.090 --> 04:07.060
And if we do something like a plus b the result right now it says hey this is t T.F. tensor add shape

04:07.240 --> 04:09.760
data type integer 32.

04:09.760 --> 04:12.220
If I run this again a plus b.

04:12.250 --> 04:17.770
Notice here that it's saying it's ADD underscore 3 which means tensor flow is actually somehow in the

04:17.770 --> 04:22.230
background keeping track of this so it's actually numbering add 2 and 3.

04:22.250 --> 04:25.450
Or to copy this and run it again.

04:25.570 --> 04:28.390
It kind of keeps track of how many times are asking for this.

04:28.390 --> 04:33.400
Now keep in mind it hasn't actually executed these tasks because we didn't run them inside of a session.

04:33.430 --> 04:44.610
So it's actually run them instead of a sessional say with T.F. session SPSS say results is equal to

04:45.180 --> 04:46.390
session run.

04:46.650 --> 04:52.740
And then we can actually put the operation here a plus b then if I check out my results it's 30 10 plus

04:52.740 --> 04:53.800
20 is 30.

04:54.060 --> 04:56.360
OK so those are very basic computations.

04:56.580 --> 05:01.830
So let's go in and show you some more operations and these operations that are going to cover they're

05:01.830 --> 05:06.260
really more in line with kind of the tensor flow version of numpad operations.

05:06.270 --> 05:12.540
Remember with non-pay we were creating matrices like zeros ones random normal distributions random uniform

05:12.540 --> 05:13.540
distributions.

05:13.590 --> 05:18.480
So I'm going to create just a bunch of operations here that we can check out we're going to create a

05:18.480 --> 05:19.460
constant again.

05:20.980 --> 05:24.820
So we have a constant operation that's just for a constant number.

05:24.820 --> 05:31.740
Sometimes you need to have a matrix filled out so you say we'll see Phil Matt and then go and say yes

05:31.940 --> 05:36.640
fill and if you do shift enter here it says hey this is going to create a tensor remember that's just

05:36.640 --> 05:42.400
a fancy word for it in dimensional array filled for scalar value and then we're going to provide it

05:42.400 --> 05:43.060
with what it wants.

05:43.060 --> 05:45.170
It wants the dimensions and the value filled with.

05:45.190 --> 05:49.920
So we'll say hey give me a four by four filled with the value 10.

05:49.960 --> 05:51.730
So that's her filled matrix.

05:51.730 --> 05:57.040
Then we can say something like my zeros and then we have T.F. zeros that's another kind of quick operation

05:57.040 --> 05:58.270
tent's flow gives you.

05:58.290 --> 06:01.600
And again just creates a tensor of all elements set to zero.

06:01.600 --> 06:05.600
So let's give it the shape we'll again ask for a four by four.

06:05.680 --> 06:07.770
We're going to do the same thing for once as you may guess.

06:07.780 --> 06:14.740
T.F. ones and say Go ahead keep it four by four and I'll show you just a few random distributions that

06:14.740 --> 06:15.130
you can do.

06:15.130 --> 06:18.200
So there's a random normal distribution we'll call it my rant.

06:18.210 --> 06:21.790
And keep in mind everything on the left hand side of that equal sign is the variable name.

06:22.120 --> 06:27.490
And then we're going to say T.F. random and as we begin to type random you can see there's a ton of

06:27.490 --> 06:28.380
options here.

06:28.470 --> 06:31.970
Look spore the options as we need them throughout of course but ran them normal.

06:31.990 --> 06:33.950
That's kind of a more common one.

06:34.000 --> 06:38.590
So it just outputs random values from a normal distribution and you can actually provide the mean and

06:38.590 --> 06:40.660
standard deviation as well as the shape.

06:40.660 --> 06:44.980
So it's going to do that we'll just say we've been doing four by four for everything so let's continue

06:45.010 --> 06:48.070
that trend and actually just keep the defaults.

06:48.070 --> 06:52.500
But in case you want to specify it could say like I mean is equal to zero standard deviation.

06:52.510 --> 06:53.710
I forget what the default was.

06:53.710 --> 06:54.780
I think that's one point zero.

06:54.880 --> 07:00.730
You can obviously change that as you see fit and then a uniform distribution is also a very common distribution

07:00.730 --> 07:01.730
to be using.

07:01.750 --> 07:09.760
So I'll say at random and go if random uniform and it's the same thing as four by four.

07:10.000 --> 07:15.220
And for a random uniform instead of having a minor standard deviation it wants a minimum value and maximum

07:15.220 --> 07:21.250
value where you basically draw from that distribution from 0 to the max value or you know if you want

07:21.250 --> 07:23.560
a negative minimum value that's OK too.

07:23.560 --> 07:27.200
And it draws them in a uniform manner so a value is zero.

07:27.210 --> 07:29.700
Now I will say Max value is 1.

07:30.430 --> 07:33.070
OK so we have a bunch of operations here.

07:33.190 --> 07:35.070
None of these have really been executed yet.

07:35.110 --> 07:40.730
So if you just call for one of them like zeros you don't see anything it just says hey this is a tensor

07:40.730 --> 07:45.580
flow it's kind of just waiting for you to execute it or run it in a session.

07:45.640 --> 07:50.560
So I'm going to create a list here called my ops which is going to be full of these operations so I'll

07:50.560 --> 08:00.130
say whatever my cost was and say Phil Matt just using tabs or complete this quickly my zeros my ones

08:00.850 --> 08:04.370
my array and then and then my Ranz you.

08:04.810 --> 08:06.990
OK so now we have a list of all of these.

08:07.000 --> 08:09.940
So let's go ahead and run these inside of a session.

08:10.000 --> 08:14.380
So usually we're always going to be using this with T.F. session.

08:14.410 --> 08:16.970
That's pretty much how you always see in the documentation.

08:17.080 --> 08:20.730
But I do want to introduce you to something called an interactive session.

08:20.740 --> 08:24.630
It's pretty useful for notebook settings like this Jupiter notebook.

08:24.900 --> 08:30.070
It doesn't really have much use outside of a notebook setting the pinning on how you actually are coding

08:30.320 --> 08:32.950
tense or flow in whatever idea you're using.

08:32.950 --> 08:38.350
But basically if you use an interactive session it allows you to constantly call it throw out multiple

08:38.350 --> 08:39.600
cells.

08:39.670 --> 08:41.510
Let me show you how to do that.

08:41.650 --> 08:45.400
We really won't be using it throughout the course but in case you're interested in it now is a good

08:45.400 --> 08:46.980
time to introduce it to you.

08:47.020 --> 08:54.400
So you just say S E S S is equal to an interactive session and then basically the rest of these cells

08:54.460 --> 09:00.670
are going to kind of pretend that they're already being called with this with T.F. session.

09:00.760 --> 09:04.980
Again this interactive session really only useful for the notebook setting.

09:04.980 --> 09:16.450
So I'm going say for operation in that list my ops I'm going to say session run and then we'll say up

09:19.880 --> 09:22.310
let's actually print this out so we can see the results.

09:24.680 --> 09:25.230
Run that.

09:25.280 --> 09:26.750
And here we can see all the results.

09:26.750 --> 09:28.740
Let's add a new line in between them.

09:29.500 --> 09:31.480
So new line in between each result.

09:31.540 --> 09:32.170
And here we have it.

09:32.170 --> 09:36.620
So I can see that constant I can see that Phil matrix member was a four by four of tens.

09:36.730 --> 09:38.710
My zeros matrix ones matrix.

09:38.710 --> 09:40.880
And then my two ran the matrices.

09:40.900 --> 09:47.350
So again the reason I was able to do this outside of the actual session was because I had this interactive

09:47.350 --> 09:48.000
session.

09:48.190 --> 09:53.650
It's really useful for Egypt or know book environment but to kind of stick with the actual documentation

09:53.740 --> 09:58.630
and all the other examples you see online will pretty much always be using this with T.F. session unless

09:58.630 --> 10:01.660
it's a really quick job that I want to run between multiple cells.

10:01.660 --> 10:01.900
OK.

10:01.900 --> 10:08.590
So we just have sess run up something to note is that a lot of these operations they have an evil method

10:08.590 --> 10:09.240
on them.

10:09.400 --> 10:14.650
So we may see that in the future where instead of saying session that run and then you pasand the operation.

10:14.770 --> 10:21.520
Usually if you put it up and then start calling evil there's an evaluation method which is essentially

10:21.520 --> 10:26.370
telling it hey evaluate this operation and you get the exact same results when you run that.

10:26.620 --> 10:26.950
OK.

10:27.010 --> 10:32.200
So again typically we'll be saying session that run instead of calling them evil but kind of for something

10:32.530 --> 10:36.510
quick and dirty we may do an interactive session just do the evil.

10:36.580 --> 10:36.800
All right.

10:36.800 --> 10:40.060
Continuing on lesing I want to talk about matrix multiplication.

10:40.100 --> 10:41.810
We use matrix multiplication a lot.

10:41.810 --> 10:44.620
With neural networks especially our basic neural networks.

10:44.690 --> 10:49.170
So let's create a matrix Schalkwyk will have it be a constant.

10:49.400 --> 10:52.740
And we're going to feed this in as a kind of nested list.

10:52.880 --> 11:00.440
So I'll say one by two here comma and then let's go ahead and say three four is actually two by two

11:00.440 --> 11:05.610
Matrix but has one two on the top row three four on the bottom row just a nested list here.

11:05.630 --> 11:13.180
And then if I say a I can call get shape off of this and it says that the shape of this tensor is two

11:13.180 --> 11:14.300
by two which makes sense.

11:14.300 --> 11:21.700
So we provided there let's go ahead and give one more constant we'll say this constant is going to be

11:21.940 --> 11:23.830
let's have it be a 2 by 1.

11:24.040 --> 11:27.820
So I have the first number be 10 seconds to be 100.

11:27.820 --> 11:32.400
And this is where you may have to kind of refresh and linear algebra after we do this multiplication.

11:32.410 --> 11:34.240
But essentially we get the shape.

11:34.240 --> 11:35.620
This is a two by one.

11:35.620 --> 11:40.670
So I'm going to say my result is equal to T.F..

11:41.040 --> 11:42.660
Matt mole.

11:42.810 --> 11:48.160
Hopefully it looks a little familiar to you based off our basic neural network when we implemented it.

11:48.220 --> 11:54.820
So I have my results here and then I can say sess thought run result in it gives me back the actual

11:54.880 --> 11:55.510
array.

11:55.630 --> 11:59.560
So it multiplied this two by two array by these two by one.

11:59.590 --> 12:02.280
And as a result you get back to buy one.

12:02.350 --> 12:05.300
Now keep in mind usually you'd have to run this within a session.

12:05.320 --> 12:10.530
It's only because I called this interactive session that I'm able to run it between multiple cells.

12:10.570 --> 12:11.990
Pretty useful for you notebook.

12:12.190 --> 12:13.840
Not super useful anywhere else.

12:14.130 --> 12:14.680
OK.

12:14.920 --> 12:19.870
And one last reminder is I could've just said evil to see the results as well.

12:20.740 --> 12:23.050
That's the very basics of tensor flow syntax.

12:23.050 --> 12:27.410
I really hope that kind of felt pretty familiar especially after our manual neural that work.

12:27.490 --> 12:31.540
And you can see here tons of flow framework doing a lot of the heavy lifting behind the scenes for you

12:31.960 --> 12:36.190
main things you should have gotten out of this lecture is that you can create basic constants operations

12:36.280 --> 12:38.040
and then run them within a session.

12:38.050 --> 12:39.850
Thanks everyone and I'll see you at the next lecture.
