WEBVTT

00:05.370 --> 00:09.440
Welcome everyone to this lecture on regular expressions.

00:09.590 --> 00:14.240
Let's imagine that you needed to search a string for a term such as the string phone.

00:14.600 --> 00:17.860
Well you can easily use the in operator keyword to do this.

00:17.900 --> 00:24.530
You could just say is the string phone in this larger string such as is the phone here and it will return

00:24.530 --> 00:24.800
back.

00:24.800 --> 00:27.160
True with Python.

00:27.180 --> 00:33.540
Now imagine you had to find a telephone number such as 4 0 8 dash 555 Dash 1 2 3 4.

00:33.550 --> 00:39.000
Again you could use the same sort of information you would say the string you were looking for in and

00:39.000 --> 00:42.580
then the larger string you wanted to search and that would return back true as well.

00:43.580 --> 00:44.710
But here's the problem.

00:44.960 --> 00:48.830
What if you actually don't know the exact phone number you're looking for you just know the general

00:48.830 --> 00:55.340
format of a phone number or if you want to find every phone number in a specific document or every e-mail

00:55.340 --> 01:01.000
address and a specific document you know that certain types of objects always hold the same format like

01:01.010 --> 01:05.780
dates e-mail addresses addresses or phone numbers.

01:05.780 --> 01:10.880
What we need is a regular expression in order to actually search for the pattern of what we're looking

01:10.880 --> 01:19.460
for instead of any specific sequence regular expressions allow for pattern searching in a text document.

01:19.460 --> 01:23.880
Now the syntax for regular expressions can be really intimidating at first.

01:23.900 --> 01:28.510
So here is the actual code for the regular expression of searching for a phone number.

01:28.640 --> 01:32.940
And if you take a look at that it's kind of unreadable if you don't know regular expressions.

01:32.960 --> 01:37.490
Hopefully after this lecture you'll be able to build an understanding of what that actually means.

01:38.120 --> 01:43.480
So the key thing to keep in mind is that every character type has a corresponding pattern code.

01:43.640 --> 01:49.230
For example digits have the placeholder pattern code of backslash D.

01:49.550 --> 01:55.510
The use of backslash allows Python to understand that this is a special code and not the letter D.

01:55.520 --> 01:59.990
You can then combine this with other special character codes in order to find any sort of pattern you

01:59.990 --> 02:01.280
can think of.

02:01.280 --> 02:08.060
So if we take a look back at this example also is actually saying is fine three digits then a dash then

02:08.060 --> 02:11.900
another set of three digits then another dash and so forth.

02:12.080 --> 02:14.600
Which is the format of a phone number.

02:14.600 --> 02:15.050
OK.

02:15.290 --> 02:19.910
So let's learn how to create our own regular expressions for finding patterns and text by hopping over

02:19.910 --> 02:21.060
to Jupiter notebook.

02:21.290 --> 02:27.060
Let's begin by understanding how to use the actual regular expression library that's built into Python.

02:27.140 --> 02:38.040
First I'm going to make some text so we can search such as the phone number of the agent is 4 0 8 5

02:38.130 --> 02:44.770
5 5 5 1 2 3 4 and I'll say call soon.

02:45.020 --> 02:49.150
And then there's a period immediately after that phone number.

02:49.340 --> 02:55.990
So what it could do is say hey is phone in text and that returns true.

02:56.060 --> 03:00.440
I can check the strings inside of another string and if I happen to know the actual phone number I'm

03:00.440 --> 03:03.680
looking for I could as he previously mentioned just run.

03:03.680 --> 03:05.310
Is this number in here.

03:05.390 --> 03:09.020
What I still don't know how to do for regular expressions is search for.

03:09.050 --> 03:13.420
Is there any phone number with this particular format inside of this text.

03:13.790 --> 03:18.200
So let me show you the format for actually running a regular expression and then we'll go over some

03:18.240 --> 03:20.270
Codder common pattern designs.

03:22.160 --> 03:23.960
So we're going to say import our e.

03:24.390 --> 03:26.780
And that's the regular expression library that's built in the python.

03:26.780 --> 03:28.870
No need to download anything for that one.

03:29.480 --> 03:36.880
And then the pattern we're going to be looking for we'll just say it's the string phone and then we

03:36.880 --> 03:44.720
use the expression library as you say our search and then you pass and your pattern and the text you

03:44.720 --> 03:49.610
want to search and then you get back this match object.

03:49.760 --> 03:53.570
And there's lots of different methods and attributes that the match object has.

03:53.570 --> 04:03.390
So for example if I call my match and set that equal to a regular expression search of a particular

04:03.390 --> 04:14.330
pattern in my text I can then ask for information off match such as the spin and it goes from 4 tonight.

04:14.550 --> 04:18.450
So what that actually means is starting an index for of this string.

04:18.450 --> 04:24.330
So 0 1 2 3 4 we can say that's the key for this pattern.

04:24.330 --> 04:25.120
That's the phone.

04:25.200 --> 04:27.330
And then it goes up to index 9.

04:27.390 --> 04:30.470
So we can see here it actually located the span of that actual pattern.

04:30.870 --> 04:33.090
And then we can ask for particular things.

04:33.090 --> 04:39.120
And if you hit that tab you'll see quite a lot of attributes but so the more common ones are asking

04:39.120 --> 04:44.240
for the start of the match or the end of the match.

04:44.240 --> 04:48.740
Now you'll notice is if the pattern occurs more than one time.

04:48.740 --> 04:52.720
So if we say My phone is a new phone.

04:53.150 --> 04:54.490
So I read the fine text there.

04:54.500 --> 05:05.560
Let's go ahead and make another match and say our research for the pattern phone inside of this text

05:07.360 --> 05:09.280
if you ask for Spanne.

05:09.490 --> 05:14.440
Unfortunately if you just say our esearch it's only going to find the first instance which happens starting

05:14.440 --> 05:15.440
at index three.

05:15.520 --> 05:17.540
It's not going to tell you that there's two of them.

05:17.740 --> 05:23.310
Instead if you want to find all the matches instead of just the first instance the correct code is r

05:23.320 --> 05:25.120
e find.

05:25.460 --> 05:26.390
Aw.

05:26.920 --> 05:29.890
And again it can pass and order pattern are looking for.

05:29.890 --> 05:33.280
So again the pattern here is just the string phone.

05:33.280 --> 05:39.640
And then we search the updated text and we can say all matches is equal to this.

05:39.910 --> 05:45.040
And if you check out all matches it's going to return back the strings.

05:45.040 --> 05:50.530
But what you could do is check the length of this list and I'll tell you it has two matches.

05:51.540 --> 05:57.570
Now if you actually want to find match objects and set it has a list of the matches which is a very

05:57.570 --> 06:02.640
useful I can say is r e find

06:06.300 --> 06:10.760
and then say whatever pattern you're looking for in our case it's fun.

06:10.910 --> 06:13.960
Whatever you want to search and then you can actually iterate for that.

06:14.180 --> 06:22.810
So you could say for match an R E find her go ahead and prints the span of that particular match.

06:23.030 --> 06:27.830
So this is essentially returning an iteration of all those match objects which were the specialized

06:27.860 --> 06:34.250
objects that we saw appear which had various attributes such as spanne start and end so commonly you're

06:34.250 --> 06:40.030
going to see us use our find all if we expect it to be more than one match in the actual documents.

06:40.040 --> 06:45.050
But our esearch is going to return back the very first match which is good in case you want to know

06:45.170 --> 06:46.730
if it actually exists.

06:46.760 --> 06:49.950
In that case you only care about one instance.

06:49.960 --> 06:51.870
Now let's go over some patterns.

06:51.910 --> 06:56.710
We learned how to search for a basic string but we actually want to search for generalized patterns

06:56.980 --> 07:02.080
not just specific strains because we may not know what specific string or sequence of letters we're

07:02.080 --> 07:03.100
looking for.

07:03.100 --> 07:08.260
Instead we just know a general pattern such as the general pattern of an e-mail address or a phone number.

07:08.470 --> 07:14.290
And before we continue I'd highly recommend the check out underneath the python text basics folder.

07:14.330 --> 07:19.390
If you open up the regular expressions notebook there's tables in here that go over a lot of what we're

07:19.390 --> 07:24.250
discussing because usually people don't memorize the patterns unless these regular expressions all the

07:24.250 --> 07:25.010
time.

07:25.060 --> 07:31.900
If you scroll down we've provided easy to use tables that reference the specialized character the description

07:32.360 --> 07:36.060
and example pattern code and an example match.

07:36.130 --> 07:41.770
And if you keep going down you'll see more for quantifiers which is essentially different amounts and

07:41.770 --> 07:45.370
then another one for groups as well as a couple of examples here.

07:45.550 --> 07:45.900
OK.

07:47.070 --> 07:52.270
So the first we're going to talk about and whole hold the little bit on this part of the notebook is

07:52.330 --> 07:53.470
underneath patterns.

07:53.560 --> 07:56.830
We're now going to look for identifiers for characters and patterns.

07:56.830 --> 08:01.630
So there's various characters and notice that there's a backslash on all of these basically telling

08:01.630 --> 08:04.140
Python Hey I don't mean the actual letter D.

08:04.150 --> 08:09.120
I mean this specialized character D which D is for a digit.

08:09.700 --> 08:14.750
And so you can see here an example pattern code could be f i l e underscore.

08:14.830 --> 08:20.020
So I'm looking for file underscore and then I just say backslash D-Backs lushly which essentially means

08:20.380 --> 08:21.490
any two digits.

08:21.490 --> 08:29.590
So an example match here could be file underscore 25 or file underscore 43 or so on basically any string

08:29.590 --> 08:32.440
that starts a file underscore and then two numbers.

08:32.440 --> 08:35.140
Hopefully you can see this already extremely useful.

08:35.140 --> 08:39.900
We also have alphanumerics which is any alphabet letter or any numeric.

08:39.910 --> 08:45.360
So in case you're looking for any series of letters and numbers you can use an alphanumeric.

08:45.400 --> 08:48.420
There's also whitespace there's a non digit.

08:48.490 --> 08:52.690
So Cap capital D stands for a nod that is essentially a letter.

08:52.690 --> 08:58.090
There's also non-alphanumeric which is kind of just punctuation and then there's also not whitespace

08:58.360 --> 09:00.010
anything that's not whitespace.

09:00.010 --> 09:04.120
So these are general characters and possible identifiers that you're going to be using.

09:04.120 --> 09:09.800
So let's go over a few examples of actually running these in order to search for a generalized pattern.

09:11.010 --> 09:15.930
So if we come back a peer to another book so far we've only been searching for strings that we know

09:15.930 --> 09:17.800
such as searching for a pattern.

09:17.820 --> 09:25.560
But now let's go ahead and generalize this to search for something using these qualifiers so we right

09:25.560 --> 09:28.700
now if we say or text let's make sure we're using the right one.

09:28.800 --> 09:33.180
We have my telephone number is 7 7 7 dash 5 5 5 that's 1 2 3 4.

09:33.240 --> 09:37.080
So I know I'm looking for a phone number but I don't know what phone number of looking for.

09:37.080 --> 09:43.350
So I need to say I'm looking for three digits a dash in other set of three digits in other dash and

09:43.350 --> 09:45.120
then a set of four digits.

09:45.120 --> 09:52.000
So the way I can do that is by defining my pattern they set that equal to and in order for Python to

09:52.000 --> 09:55.450
understand that's a specific pattern regular expression string.

09:55.450 --> 10:03.240
You start off with our outside of these quotes and then you pass the pattern you're looking for.

10:03.280 --> 10:11.770
So have backslash the three times then a dash backslash Diegan and other three times then another dash

10:12.910 --> 10:16.020
and then backslash D again four times.

10:16.030 --> 10:22.030
So now we have a generalized pattern that looks for three digits or dash another set of three digits

10:22.180 --> 10:24.750
a dash and then four digits.

10:24.940 --> 10:38.040
So I can say now phone number is equal to our search and then search for the pattern inside of that

10:38.040 --> 10:47.550
text and what this does is it returns back my actual matching object and it tells me where in the actual

10:47.550 --> 10:50.850
document it found it as well as the actual match it found.

10:51.000 --> 10:58.130
And if you actually just want this information the actual match itself you can say group and it will

10:58.140 --> 11:00.870
group together everything that it found to be matching.

11:00.870 --> 11:03.360
So in this case it's this phone number here.

11:03.360 --> 11:09.210
Keep in mind if I were to change my text so I don't say text is equal to is going to copy and paste

11:09.210 --> 11:09.710
this.

11:09.900 --> 11:13.800
Let's go ahead and change this to be another set of numbers like a.

11:14.500 --> 11:17.160
This expression is just looking for a generalized pattern.

11:17.250 --> 11:19.500
So it's actually still able to find it.

11:19.770 --> 11:21.510
Again I'm just using our search.

11:21.570 --> 11:26.000
And if you wanted to find multiple phone numbers here you could say find all.

11:26.160 --> 11:30.870
And it would be able to return back all the matches if you want to iterate through those matches.

11:30.870 --> 11:33.340
You can use our thought find it.

11:33.690 --> 11:40.320
The main idea is that utilizing these sort of tables you can then create any sort of pattern you can

11:40.320 --> 11:45.360
think of digits alphanumerics whitespace non digits.

11:45.470 --> 11:49.750
Now because it's really common to see a bunch of alphanumerics in a row or a bunch of digits in a row

11:50.120 --> 11:53.430
it's kind of annoying to have to type backslash the a bunch of times.

11:53.600 --> 11:57.550
So the next set of patterns we're going to learn about are quantifiers.

11:57.800 --> 12:00.080
So we know special character designations.

12:00.200 --> 12:04.030
We can now use them lot of qualifiers to define how many we should expect.

12:04.040 --> 12:10.760
So here we have a character plus means occurs one or more times having these curly braces of a number

12:10.820 --> 12:13.340
means occurs exactly three times.

12:13.340 --> 12:16.810
So you put in your special character code and then curly braces.

12:16.850 --> 12:18.550
How many times you want it to occur.

12:18.740 --> 12:23.720
So this says any non digit capital-T that occurs exactly three times.

12:23.720 --> 12:28.370
So something like ABC and then we can say occurs two to four times.

12:28.370 --> 12:33.130
So you can give actual ranges by saying a number for the low range comma and the number for the higher

12:33.130 --> 12:39.890
range you can say a number comma and then no other number for something X or more times like three or

12:39.890 --> 12:40.740
more times.

12:41.590 --> 12:46.150
And Asterix is not too common to use because it says occurs 0 or more times.

12:46.160 --> 12:50.680
So essentially means it's occurring either 0 times or more than 0.

12:50.690 --> 12:53.760
So that's maybe a little too flexible for a lot of use cases.

12:53.970 --> 12:56.840
And then a question mark is once or more.

12:56.930 --> 13:02.320
OK so let's go ahead and convert that telephone number here using those quantifiers.

13:02.510 --> 13:08.530
So I'm looking for a group of three digits a dash three digits a dash and then four digits.

13:08.600 --> 13:14.060
So good use case for this one as far as quantifiers is probably this pattern here a set of curly braces.

13:14.060 --> 13:21.330
And I know I'm looking for three three and four so I'm going to redefine this to be the following.

13:22.380 --> 13:28.560
I can basically efficiently write this pattern saying R and you can use double quotes or single quotes

13:29.520 --> 13:32.630
then say backslash D and instead of writing it three times.

13:32.730 --> 13:39.180
I'm just going to use my quantifier which is curly braces three to say I'm looking for three digits

13:39.510 --> 13:46.730
a dash in other set of three digits in the dash and then a set of four digits.

13:47.310 --> 13:55.470
And if we take a look again for this I can say are esearch for the pattern in the text and it was able

13:55.470 --> 13:58.120
to find the updated match.

13:58.220 --> 14:02.090
So it's usually more efficient to write something like this than to write something like this.

14:02.150 --> 14:06.830
But if you were to jump straight into this refrig expressions you can see that regular expressions can

14:06.860 --> 14:09.060
easily become very difficult to read.

14:09.290 --> 14:11.550
But keep in mind you can always just break it down.

14:11.630 --> 14:16.400
The tables that we provide and you can always use that group in case you actually want to find the actual

14:16.400 --> 14:18.350
object or pattern that matched.

14:18.650 --> 14:26.060
So I can say again my match here and you have the specialized match objects with a bunch of different

14:26.060 --> 14:30.980
attributes and parameters here that you can explore a really useful one is just grouping it together

14:31.220 --> 14:33.050
to find the actual match.

14:33.050 --> 14:33.530
All right.

14:33.620 --> 14:37.520
So that's the basics of identifiers and quantifiers.

14:37.520 --> 14:41.650
Again I highly recommend you check out the tables that we provide for patterns.

14:41.690 --> 14:47.630
You can essentially build any pattern you want using identifiers looking for specific types of characters

14:47.630 --> 14:54.020
like digits alphanumerics or white space or their reverse opposites non digits not alphanumerics and

14:54.020 --> 14:55.360
nonwhite space.

14:55.370 --> 15:00.620
And you can combine those with quantifiers knowing exactly how many you want to expect or some sort

15:00.620 --> 15:02.060
of range that you expect.

15:02.150 --> 15:07.850
Coming up next we're to continue our discussion by talking about groups talking about additional syntax

15:07.850 --> 15:12.980
such as or operators wildcard characters and then starts with and ends with.

15:13.130 --> 15:17.120
We'll see at the next lecture where we talk about these other various regular expression topics.
