WEBVTT

00:05.230 --> 00:11.600
Welcome back in this lecture for part one of working textfiles we're going to focus on some basic print

00:11.620 --> 00:14.430
formatting specifically with the string literal.

00:14.650 --> 00:17.950
We'll also discuss alignment options with string literals.

00:17.950 --> 00:19.210
Let's get started.

00:19.210 --> 00:19.570
All right.

00:19.600 --> 00:26.140
I'm going to begin by showing you how before Python 3.6 you had to perform print formatting and the

00:26.140 --> 00:33.250
way you would do this is if you had a variable for example person is equal to Jose and then you want

00:33.280 --> 00:38.260
to insert that variable into a string you were going to print out the way you used that to do it is

00:38.260 --> 00:40.000
by saying something like.

00:40.000 --> 00:43.640
My name is and then you would have curly braces.

00:43.700 --> 00:49.190
And after the string you would say the format and then pass in the variable name you want to insert

00:49.700 --> 00:51.420
in place of the curly braces.

00:51.470 --> 00:57.400
So if you on this I now see my name is Jose this is the old way the python 3.6.

00:57.470 --> 01:04.190
Now 3.6 and higher now includes what's known as formatted string literals or f string literals for short.

01:04.190 --> 01:09.740
And some people just call them as strings and it actually simplifies this entire process a lot more.

01:09.840 --> 01:16.020
So all you need to say is print and then type a single F and then start typing out your string and then

01:16.020 --> 01:18.550
you can say my name is.

01:18.900 --> 01:25.050
And then inside the curly braces you can directly type in the variable name such as person here.

01:25.140 --> 01:30.540
Essentially this F in front of the string allows you to not have to worry anymore about the stop format

01:30.540 --> 01:31.220
call.

01:31.410 --> 01:34.440
And then when you run this you get back the same result.

01:34.440 --> 01:39.660
Keep in mind if you forget to type the F in front of the string then it's actually just going to literally

01:39.660 --> 01:43.200
prints out the curly braces and whatever your variable is called.

01:43.200 --> 01:47.720
So they'll forget you need to type in F there in order to see that.

01:47.730 --> 01:51.990
Now the other thing I want to point out that's nice about this method is if you have a Python object

01:52.080 --> 01:53.260
such as a dictionary.

01:53.570 --> 02:00.610
Go ahead to make a simple dictionary like a one two three and B with the value 4 5 6.

02:00.660 --> 02:08.760
You can actually do sort of operations within the string literal so I can say print F and my number

02:09.150 --> 02:09.780
is.

02:09.960 --> 02:18.080
And then inside the curly braces I can actually perform operations like d of a run that and I'll say

02:18.140 --> 02:19.710
my number is 1 to 3.

02:19.820 --> 02:21.440
Again I have a curly braces here.

02:21.510 --> 02:24.200
And then inside of it I have actual operations.

02:24.230 --> 02:25.880
It works the same for list.

02:25.970 --> 02:35.780
So if I say my list is 0 1 2 I run that I could from my list actually index an item like 0 and then

02:35.780 --> 02:38.380
run that and I'll say my number is 0.

02:38.630 --> 02:39.140
OK.

02:39.140 --> 02:44.540
So again you can do sort of just basic Python operations inside the curly braces inside of the string

02:44.540 --> 02:45.660
literal.

02:45.680 --> 02:51.380
Now the last thing I want to go over are actually using alignments and padding when you're dealing with

02:51.590 --> 02:53.710
multiple items that you're trying to printout.

02:53.840 --> 02:57.720
And we're actually going to be using this later on in the Course specifically when we start talking

02:57.720 --> 02:59.750
up parts of speech tagging Spacey.

02:59.900 --> 03:05.090
Spacey often prints out things in a format that doesn't look that nice and is hard to read but luckily

03:05.090 --> 03:07.030
we can format it ourselves.

03:07.070 --> 03:14.480
What I want to do is I'm going to copy and paste from the Python text basics working of text files notebook

03:14.870 --> 03:15.570
a list.

03:15.650 --> 03:18.900
So again you can open up the notebook and check out this list.

03:18.920 --> 03:21.340
This list is just a list of tuples.

03:21.410 --> 03:26.590
So if you run this and then check out library you should see something else like this.

03:26.590 --> 03:29.060
I have a variable which is a list called Library.

03:29.110 --> 03:35.080
And inside this library I have two bowls just three at a time or really just three objects and each

03:35.080 --> 03:38.760
tuple author topic and pages and then some examples here.

03:38.770 --> 03:47.700
So what I could do is I could say for book in library prints book Run that and I get to see all the

03:47.700 --> 03:49.170
tuples being printed up.

03:49.170 --> 03:55.170
The other thing I could do is start using string literals to get a little fancy here and then index

03:55.170 --> 04:03.390
maybe just want the authors off of this so it could say whoops curly braces they're author is and then

04:03.390 --> 04:08.060
run that and says authors author authors Twain Feinman and Hampton and so on.

04:08.070 --> 04:13.050
So just using the indexing book with that for loop it's indexing the first item off of each of these

04:13.050 --> 04:14.340
tuples.

04:14.340 --> 04:16.760
Now I could use tuple in packing to do the following.

04:16.800 --> 04:25.710
I could say Author topic and pages and library and then say print how author is and inside of this curly

04:25.710 --> 04:29.730
braces I can just pasand author and it's the same thing.

04:29.730 --> 04:34.120
So what I'm going to do now is print out all three of those items.

04:34.440 --> 04:42.170
So I'm going to say Author another set of curly braces with topic and another set of curly braces with

04:42.170 --> 04:43.140
pages.

04:43.300 --> 04:49.010
Again I'm just using tuple and packing here to unpack the tuple and then passing in these variables

04:49.130 --> 04:50.560
into the curly braces.

04:50.630 --> 04:52.280
So I notice that's why they're not capitalized.

04:52.280 --> 04:59.390
It's not technically anything to do if these three capitalized strings here is just tuple and packing

04:59.500 --> 05:02.240
that I'm now inserting using string literals.

05:02.270 --> 05:05.300
So if you're on this you get something that looks like this.

05:05.300 --> 05:10.550
Now you may notice right away that it looks like the formatting is slightly sloppy here and that's because

05:10.880 --> 05:15.670
we essentially are actually taking into account any sort of padding or any sort of space.

05:15.680 --> 05:22.180
So if I come back to this library list and make one of these titles really long such as rafting and

05:22.220 --> 05:25.140
water alone let me rerun this.

05:25.190 --> 05:31.280
So now you can see I have a really long title if I just run this now my formatting is even worse.

05:31.280 --> 05:36.180
So I see pages and then 6:0 ones all the way over here fives all the way over here and so on.

05:36.410 --> 05:41.780
And there's a variety of ways that we can add using string literal formatting to actually fix this sort

05:41.780 --> 05:42.700
of issue.

05:42.710 --> 05:48.140
So the first thing you can do is you can pass in an argument for a minimum with essentially a minimum

05:48.140 --> 05:51.170
with that each of these so-called columns could take.

05:51.170 --> 05:54.760
So it is inside this curly braces after the variable name.

05:54.980 --> 06:02.420
You provide a colon a another set of curly braces and then a number of minimum number spaces that should

06:02.420 --> 06:05.040
be taken up by this variable.

06:05.090 --> 06:12.710
So I'm going to add in for topic colon and say it should take up a minimum number of 30 spaces and then

06:12.710 --> 06:13.700
pages.

06:13.700 --> 06:16.840
I'll say it should take up a minimum number of 10 spaces.

06:16.910 --> 06:21.420
So now when you run this you can see they've already begun formatting it a lot better.

06:21.440 --> 06:28.580
So author now prints out Author and then adds in white space until it has 10 spaces and then it prints

06:28.580 --> 06:33.950
out the topic and adds in enough white space until it takes up 30 spaces and then we have pages and

06:33.950 --> 06:34.920
so on.

06:35.000 --> 06:37.190
You probably noticed that pages.

06:37.190 --> 06:42.730
It looks a little strangely aligned here and that's because of the way that it's trying to combine this

06:42.730 --> 06:45.080
string with an integer.

06:45.080 --> 06:47.100
Now not to worry we can actually fix this.

06:47.210 --> 06:53.930
And there's a variety of ways we can fix this but probably the easiest is to in-between this colon and

06:53.930 --> 06:55.980
right here at these braces for 10.

06:56.090 --> 07:05.520
You can passen a greater than sign and then run that and it will automatically align pages here.

07:05.520 --> 07:11.670
Now what you can also do is in between the colon and this greater than sign you can add in whatever

07:11.670 --> 07:14.580
you want to pad the Fool 10 with.

07:14.580 --> 07:15.680
So what are I mean by that.

07:15.870 --> 07:20.070
Well you notice pages right now that takes up about or know about.

07:20.100 --> 07:21.700
It takes up five characters.

07:21.790 --> 07:26.790
But we said it must take up 10 characters which means there's actually five more characters here of

07:26.790 --> 07:28.200
blank white space.

07:28.200 --> 07:32.490
Sometimes you may want to fill that in with your own custom character and in order to do that you can

07:32.490 --> 07:36.390
just pass and a character in between the colon and the greater than sign.

07:36.390 --> 07:41.480
So I can pass in a dash and if you run this it's going to fill this up with dashes.

07:41.480 --> 07:43.580
So now you notice that there's five dashes here.

07:43.740 --> 07:47.570
And then my five letters equaling a total of 10 characters full.

07:47.910 --> 07:48.620
And so on.

07:48.630 --> 07:50.250
For these guys as well.

07:50.250 --> 07:54.740
Now what I could also do is pass an adult here in Philadelphia Dopp and so on.

07:54.750 --> 07:59.730
It's really up to you whatever you want to fill in dashes and dots are good choices but you could technically

07:59.730 --> 08:03.110
like pass on a t here and it would automatically fill it up with t's.

08:03.120 --> 08:05.110
Although something like That's not very helpful.

08:05.310 --> 08:07.920
So I would recommend use dots or dashes.

08:07.980 --> 08:08.470
OK.

08:08.610 --> 08:12.890
So don't worry too much about getting into the weeds here about this formatting.

08:13.020 --> 08:17.330
Really I just want you to see it first before you encounter it later on in the course.

08:17.520 --> 08:22.170
It's just a way to nicely format things into tables especially when we're dealing with print out with

08:22.170 --> 08:23.910
the Speccy library.

08:23.910 --> 08:29.780
The last thing I want to talk about for part one is the ability for the formatting and to do this I'm

08:29.780 --> 08:37.580
going to import it they will say from time import time I'm going to create a date time object which

08:37.580 --> 08:42.280
is a specialized object in Python that can hold dates and time information.

08:42.350 --> 08:50.840
So say the year is 2019 and the month is two for February and the day is 28.

08:51.850 --> 08:58.850
Run that and then we can go ahead and print out and I could say with that string literals just print

08:58.870 --> 09:02.710
out today run that and it prints out the date time object.

09:02.770 --> 09:05.760
You'll notice right away that the date time object is standard.

09:05.800 --> 09:11.230
So even if you just actually grab the object itself today it's a date time object and the standardized

09:11.230 --> 09:14.410
way of printing it out is year month date.

09:14.540 --> 09:18.380
And it also has time which is our minutes and seconds.

09:18.580 --> 09:23.230
We actually didn't provide that information at that time so it just defaulted to zero hour 0 minutes

09:23.260 --> 09:24.640
and 0 seconds.

09:24.640 --> 09:30.010
Often you're going to want to format this yourself so that it looks nicer and you can do that is simply

09:30.100 --> 09:35.140
after your variable name for whatever the date time object is type of colon and then you type in the

09:35.140 --> 09:40.570
formatting you want and what you're going to do is you're going to use a specific as Taraf time code

09:40.750 --> 09:48.430
or a time reference and you can go to as Taraf time dot org to check out a table of the directives here

09:48.850 --> 09:51.770
which essentially means there are special codes of a percent sign.

09:51.940 --> 09:52.790
And what they mean.

09:52.900 --> 09:54.280
And an example.

09:54.280 --> 09:59.020
So for example if I wanted to print out the month maybe I wanted to print out the full month that I

09:59.020 --> 10:04.420
just look it up months a full name and it's percent signed capital B.

10:04.470 --> 10:07.700
So what I do here is say percent sign capital B.

10:08.010 --> 10:13.410
I run that and now I see the full month there February and maybe I want to see more information like

10:13.410 --> 10:15.910
they can say percent sign.

10:16.230 --> 10:21.000
And then February 20th and then maybe I want to say comma and then give me the full year.

10:21.000 --> 10:24.310
And if I look it up in the table it's percent signed capital Y.

10:24.720 --> 10:28.060
So run that and then we see February 28th come 2019.

10:28.110 --> 10:33.540
So all you need to do is pass in your variable the colon and then what formatting you want for your

10:33.540 --> 10:38.340
date time objects you can check out this website for full codes here that we don't need to memorize

10:38.340 --> 10:40.570
them and keep in mind I don't have them memorized.

10:40.590 --> 10:42.420
I just always look them up in this table.

10:42.420 --> 10:47.190
The common ones I do but typically it's afine to worry about memorizing Instead you can easily look

10:47.190 --> 10:48.260
it up.

10:48.330 --> 10:48.840
All right.

10:49.020 --> 10:52.530
So that concludes our discussion on print formatting.

10:52.530 --> 10:57.120
Coming up next we're going to talk about working of text files creating a file opening the file and

10:57.120 --> 10:58.690
then reading and writing to it.

10:58.710 --> 10:59.730
We'll see you at the next lecture.
