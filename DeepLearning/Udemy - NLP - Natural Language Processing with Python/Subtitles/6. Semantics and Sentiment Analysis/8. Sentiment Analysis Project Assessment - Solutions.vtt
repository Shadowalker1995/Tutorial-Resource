WEBVTT

00:00.270 --> 00:01.450
Welcome back everyone.

00:01.470 --> 00:05.850
In this lecture we're going to go over the solutions for the sentiment analysis Assessment Project.

00:05.850 --> 00:07.410
Let's get started.

00:07.410 --> 00:12.030
All right let's begin with Task 1 performing vector arithmetic on our own words.

00:12.120 --> 00:18.030
We're gonna begin by importing spacey and then loading up the spacey language model.

00:18.150 --> 00:24.630
So Spacey the load and then we're going to load in English core and you can either load in the large

00:24.660 --> 00:25.600
or medium.

00:25.770 --> 00:29.280
So I'm going to load in the large again if you download these smaller medium.

00:29.280 --> 00:34.260
Go ahead and load that one up then we're gonna choose the words we wish to compare and obtain the vectors

00:34.380 --> 00:41.430
and the way we do that is you simply call an LP the vocab and then almost like a dictionary call it

00:41.430 --> 00:42.900
you're gonna ask for the word.

00:42.900 --> 00:48.000
So let's go ahead and again your words may have been chosen differently but I'm gonna choose Wolf or

00:48.000 --> 00:54.750
Wolf and then ask for the vector here and we'll say this is word one and then I'm going to copy paste

00:54.870 --> 01:03.210
this command two more times rename this word two and word three and then let's ask for I'm going to

01:03.210 --> 01:04.140
choose dog and cat.

01:05.220 --> 01:07.770
So say dog and cat.

01:08.280 --> 01:14.670
So my idea here is I'm going to see if I can take Wolf subtract dog from it and then add a cat and see

01:14.670 --> 01:20.010
if the dimensions hold some sort of understanding that Wolf is essentially kind of an underestimated

01:20.010 --> 01:21.410
version of a dog.

01:21.420 --> 01:27.630
So hopefully if I subtract dog and then add a cat I can get some sort of underestimated version of cat

01:27.930 --> 01:29.610
with my vector arithmetic.

01:29.610 --> 01:33.270
We don't know for certain if that's going to work but we can definitely try it out.

01:33.330 --> 01:39.810
So next we need to import from spatial that is from Spy import spatial and define a code similarity

01:39.810 --> 01:40.720
function.

01:40.860 --> 01:49.570
So we'll say from Spy import spatial spatial and here I'm just gonna do this as a lambda expression.

01:49.590 --> 01:54.750
We'll say cosine Sim is equal to Lambda that takes in an X and Y.

01:54.750 --> 02:01.740
Again this can also just be a normal function does it have to be lambda and we'll say 1 minus we'll

02:01.740 --> 02:14.250
call spatial dot and then distance and then say dot cosine X come alive all right.

02:14.250 --> 02:16.310
So there's a cosine similarity function.

02:16.410 --> 02:19.330
Next we want to write an expression that actually calculates the new vector.

02:19.350 --> 02:24.660
So we'll say if I can just copy what is written here you vector is equal to word one minus word two

02:24.690 --> 02:30.180
plus word three doesn't have to be this exact or arithmetic you could do all addition or all subtraction.

02:30.180 --> 02:30.620
Up to you.

02:30.650 --> 02:36.210
But let's make sure we've defined word one up here by running that vector running this again.

02:36.210 --> 02:36.460
Okay.

02:36.510 --> 02:38.400
So now we have our new vector.

02:38.400 --> 02:42.900
So if we take a look at this new vector it should just be some vector of three hundred dimensions so

02:42.900 --> 02:44.440
you can check out a shape.

02:44.660 --> 02:49.050
Now we have something here that mentions this new vector itself isn't a word vector.

02:49.050 --> 02:51.490
It's some sort of earth metric based off these words.

02:51.510 --> 02:56.370
So in order to find an actual vector that belongs to a word we want to find out what are the top 10

02:56.370 --> 03:00.000
closest vectors in the vocabulary to this particular new vector.

03:00.000 --> 03:07.010
So we're going to hear is saying computed sims or computed similarities.

03:07.010 --> 03:10.140
And we'll go for every word in MLP vocab

03:13.080 --> 03:22.980
will say if that particular word has a vector has not had so if that word has a vector.

03:22.980 --> 03:30.680
And then if that word is lowercase and if that word is Alphabetic.

03:31.000 --> 03:39.820
So it's not just the number we'll say is alpha then we will say its similarity is equal to the cosine

03:39.820 --> 03:44.650
similarity function that we define and then we're simply going to pass in the new vector we calculated

03:45.430 --> 03:50.770
against that particular word vector because we're going for every word inside our vocabulary is really

03:50.770 --> 03:53.190
similar to what we did during the lectures.

03:53.470 --> 04:01.090
And then we're going to grab our computed similarities or computed Sims list and append not just the

04:01.090 --> 04:03.010
similarity but also the word associated with it.

04:03.070 --> 04:06.360
So I'm going to say as a tuple nurse I have another set of princes here.

04:06.480 --> 04:10.120
We'll say a word and then it's particular similar.

04:10.150 --> 04:11.600
So word and same.

04:11.940 --> 04:15.580
So you go ahead and run that and it's going to take a while to run because we're running through the

04:15.580 --> 04:21.160
entire vocabulary and I have a really large vocabulary here because remember we're loading up the largest

04:21.670 --> 04:23.250
basically possible language library.

04:23.310 --> 04:28.210
So it's going to go through around I think it's around 600 to 800 thousand words there that we're running

04:28.210 --> 04:29.620
through here.

04:29.620 --> 04:37.300
Then once this is done in order to actually grab the most similar word vectors what we're going to do

04:37.300 --> 04:51.970
here is say computed Sims is equal to the sorted computed Sims but we're going to sort by the similarity

04:51.970 --> 04:59.800
value systems tuples here so we can do this by simply saying key lambda item and in order to get descending

04:59.800 --> 05:01.510
order for similarity we'll say minus.

05:01.510 --> 05:09.230
Item 1 so this item is essentially the tuple here and then we're sorting by index 1 the similarity and

05:09.230 --> 05:12.770
we're doing descending indexing or descending slaughtering.

05:12.800 --> 05:14.770
So we have the minus sign there.

05:15.110 --> 05:21.380
Go ahead and run that and then let's check out our computed Sims particularly let's just check out the

05:22.560 --> 05:27.050
first 10 here and we actually just want the text not the tuples themselves.

05:27.180 --> 05:30.230
So we're gonna do a little bit of extra list comprehension here.

05:30.420 --> 05:43.570
So we'll say prints and we're going to grab the word or essentially the token text for word in and then

05:43.570 --> 05:45.020
we're just gonna print that out.

05:45.200 --> 05:45.890
Okay.

05:46.060 --> 05:51.790
So it looks like we still love wolf and wolves as really similar but know that because we added cap

05:51.880 --> 05:57.510
we start getting more underestimated cat like things like a panther or lynx or a tiger.

05:57.670 --> 06:03.790
We also get underestimated animals in general like owls but lions foxes and then again we get cat.

06:03.820 --> 06:05.680
So adding cap and otter.

06:05.680 --> 06:10.840
So it's really interesting that we first off we all got animals which makes a lot of sense given that

06:10.960 --> 06:17.650
I'm passing in words wolf dog and cat but also just adding in that cat vector and subtracting the dog

06:17.650 --> 06:21.880
component allows me to get things like Panther and Tiger.

06:21.880 --> 06:23.350
So pretty interesting there.

06:23.410 --> 06:28.820
I hope you had fun with your own arithmetic the next challenge was to write a function that takes in

06:28.820 --> 06:34.130
three strings and performs this sort of similar arithmetic and essentially all you need to do is copy

06:34.130 --> 06:36.340
and paste the code that we provided.

06:36.500 --> 06:38.610
Well that we already work through here.

06:38.630 --> 06:45.410
So the way we can do that is we can simply create our new vector so we can say something like new vector

06:46.220 --> 06:49.890
is equal to and then we will just copy and paste what you wrote up here.

06:50.270 --> 06:55.910
So a new vector is equal to word one minus word two plus word three.

06:55.920 --> 06:56.730
There we go.

06:56.730 --> 07:01.680
And then we'd have to calculate the word vectors of ABC and they're going to pass in as three strings.

07:01.680 --> 07:03.750
So we just calculate them like this.

07:03.750 --> 07:05.520
Copy and paste these guys.

07:05.520 --> 07:10.380
So this essentially just so you can play around with this in an easier fashion in the future and then

07:10.380 --> 07:12.660
instead of providing wolf dog crap you simply say

07:15.850 --> 07:21.490
B and then C and notice I'm not providing them as strings I'm just providing them as the strings that

07:21.490 --> 07:26.140
are or the variables that are being passed then so have what one or two or three are new calculated

07:26.140 --> 07:31.930
vector and then we just copy and paste these last couple of cells here and you'll get the same result

07:32.380 --> 07:39.700
and then make sure this is in or indented correctly and then we want to get our computed Sims right

07:39.700 --> 07:45.790
here and then we're going to return this list or you can print it out whatever you want to do if this

07:45.790 --> 07:47.280
particular function.

07:47.280 --> 07:49.570
So can say return right here.

07:49.660 --> 07:55.120
So if we run that and then run the vector math on King man and woman again this takes a little bit time

07:55.120 --> 08:01.210
since this for loop takes a little bit of time but eventually you should see a list pop out of the 10

08:01.210 --> 08:07.690
words so I'll let that run for a little bit while we start talking about task to task to was to perform

08:07.750 --> 08:12.140
Vader sentiment analysis on our own review and this is actually pretty straightforward.

08:12.160 --> 08:12.710
So here we go.

08:12.730 --> 08:13.470
We see the results here.

08:13.480 --> 08:15.140
King Queen Prince King's princess.

08:15.160 --> 08:16.030
And so on.

08:16.240 --> 08:17.590
But this one's pretty easy.

08:17.590 --> 08:27.710
We just need to say from and I'll take that sentiment sentiment that Vader remember you need to download

08:27.710 --> 08:28.070
Vader.

08:28.160 --> 08:35.300
But we did that during lectures we'll take sentiment intensity analyzer and then say ASI D is equal

08:35.300 --> 08:38.210
to sentiment intensity analyzer.

08:38.210 --> 08:39.660
Create an instance of it.

08:39.710 --> 08:42.880
Go ahead and write your own review as one continuous string.

08:42.950 --> 08:58.290
So say this movie was absolutely awful the worst movie I have ever seen OK so pretty bad movie.

08:58.290 --> 09:04.500
Then we're gonna do is we're going to obtain the S.A.T. scores for our review and then here we have

09:04.500 --> 09:04.590
it.

09:04.620 --> 09:10.340
So we have quite negative a little bit neutral but no positives of the compound score was just atrocious.

09:10.350 --> 09:14.510
Now a challenge was to write a function that takes in a review and returns a score of either positive

09:14.610 --> 09:16.200
negative and neutral.

09:16.200 --> 09:17.570
Again pretty straightforward here.

09:17.580 --> 09:26.830
All we need to do is calculate the scores as a dictionary by calling S.A.T. polarity scores on the string

09:26.830 --> 09:27.930
that's passed in.

09:28.300 --> 09:39.210
And then we simply say if the scores compound key member of the compound score if that's equal to zero

09:39.240 --> 09:45.610
which is pretty unlikely but you never know you may have a truly neutral string you'll just say neutral

09:47.090 --> 10:02.200
and then we'll say Elif the scores compound is greater than zero will return positive and then else

10:03.470 --> 10:05.990
we'll return negative.

10:06.230 --> 10:10.000
So here we have a function that will basically read in any review.

10:10.070 --> 10:16.390
So go ahead and run this again and return back negative for our negative string review up here.

10:16.400 --> 10:21.620
And keep in mind you can also set these values beyond zero.

10:21.620 --> 10:23.780
Maybe you can have a threshold for neutral.

10:23.780 --> 10:29.900
So you could say something like If this score compound is in between values negative zero point two

10:29.960 --> 10:31.550
and positive zero point two.

10:31.640 --> 10:33.050
Maybe that's your neutral range.

10:33.070 --> 10:36.530
So you're only looking for really extreme negative or really extreme positive reviews.

10:36.650 --> 10:41.810
So you can do that as well since typically your compound score will often be exactly zero.

10:41.810 --> 10:47.140
It may be a better idea to provide a range of neutral score values.

10:47.150 --> 10:47.720
OK.

10:47.810 --> 10:48.830
So that's it.

10:48.830 --> 10:53.090
Hope you enjoyed the assessment and I hope it felt more like a review of everything we covered in this

10:53.090 --> 10:54.290
section.

10:54.290 --> 10:58.850
I would encourage you to play around at these functions that you just created by performing more arithmetic

10:59.120 --> 11:01.220
or testing out your own reviews.

11:01.220 --> 11:02.900
Thanks and we'll see you at the next lecture.
