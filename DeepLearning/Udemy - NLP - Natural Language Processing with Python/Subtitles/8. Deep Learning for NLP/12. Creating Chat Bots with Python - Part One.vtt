WEBVTT

00:05.250 --> 00:06.460
Welcome back everyone.

00:06.480 --> 00:11.580
In this lecture we're going to begin working for a Q and A bot with Python 4 Part 1.

00:11.580 --> 00:15.930
We're going to load the data explore the data format and create a vocabulary.

00:15.960 --> 00:17.070
Let's get started.

00:17.070 --> 00:19.170
I'm going to open up a new notebook.

00:19.170 --> 00:19.480
All right.

00:19.530 --> 00:26.850
My new notebook I'm going to begin by importing pickle because we have a specialized file format for

00:26.850 --> 00:31.500
the data which is going to be a pickle file essentially a compressed way of saving our data.

00:31.710 --> 00:33.900
And then later on we may be using some pie.

00:33.900 --> 00:35.320
So go ahead and at the top.

00:35.340 --> 00:41.250
Important umpires NDP and we have a training set and a test set for the training set.

00:41.250 --> 00:43.920
We've already saved that under the deep learning folder for you.

00:43.920 --> 00:49.130
You just need to say with open and then go ahead and say train underscore.

00:49.130 --> 00:50.490
Cue a thought text.

00:50.520 --> 00:53.930
Again that should already be located for you under the deep learning folder.

00:54.180 --> 01:01.440
And then we want to not just read it but read it as a binary file and then as f or really any variable

01:01.440 --> 01:07.830
you want and then we'll say our training data is equal to and we're going to use that pixel functionality

01:07.830 --> 01:10.000
to load in that file.

01:10.020 --> 01:14.150
That's why we needed to read it as not just ah but read binary.

01:14.340 --> 01:18.840
So we're gonna do that for the training data and then just go ahead and copy and paste this and do the

01:18.840 --> 01:21.180
same for our test data.

01:21.180 --> 01:27.930
So say test and then we'll label this variable test data so run those two cells.

01:27.930 --> 01:34.200
And now if you actually check out the type of this data for example the type of the test data you'll

01:34.200 --> 01:37.890
notice that it's a list and it's gonna be the same thing for the training data.

01:37.920 --> 01:42.030
Essentially the training data and testing data are the same we already did the train test split for

01:42.030 --> 01:42.800
you.

01:42.840 --> 01:46.780
So let's go ahead and check out the length of the data.

01:47.020 --> 01:55.390
We have ten thousand points for training data and then we have 1000 points for test data.

01:55.390 --> 02:00.850
So have more or less kind of a 10 to 1 ratio for testing data versus training data.

02:01.090 --> 02:08.540
And if we take a look at the training data you'll notice it's essentially a list of tuples.

02:08.540 --> 02:10.450
So let's go ahead and grab one of these tuples.

02:10.490 --> 02:14.060
We'll just grab the very first one off that training data.

02:14.060 --> 02:16.070
And here we can see the three main components.

02:16.130 --> 02:21.980
We can see the story the question and then the answer or the solution.

02:21.980 --> 02:24.070
So the story here is Mary moves to the bathroom.

02:24.120 --> 02:25.770
Sandra journey to the bedroom.

02:25.880 --> 02:28.280
The question was Is Sandra in the hallway.

02:28.280 --> 02:33.870
And the correct answer is no so if you want to actually form at this she can read these a little nicer

02:33.880 --> 02:36.150
we can use some joint functionality.

02:36.280 --> 02:44.090
So for example I can say trained data remember this is kind of a tuple with a list as well to listen

02:44.090 --> 02:45.850
side of it plus a string.

02:45.850 --> 02:48.210
So I can index off of this.

02:48.280 --> 02:49.910
So here we have the story itself.

02:49.960 --> 02:52.180
So let's go ahead and join that

02:55.130 --> 02:59.170
and essentially takes every item in the list and then joins it with a space in between.

02:59.170 --> 03:00.920
So it actually prints out the story.

03:00.970 --> 03:05.410
So here we see Mary move to the bathroom stand the journey to the bedroom and we can do the same thing

03:05.770 --> 03:09.020
for the question itself just to make it a little easier to read.

03:09.070 --> 03:14.920
QUESTION Was the sander in the hallway and then finally the correct answer for that first one is no.

03:16.120 --> 03:22.860
So last item is no so what we want to do to begin with is set up a vocabulary of all the words inside

03:22.850 --> 03:27.790
our data set and to do this we need to make sure that we take not just the training data but also the

03:27.790 --> 03:29.160
test data into account.

03:29.290 --> 03:33.940
That way we make sure that when we're actually testing our algorithm we don't get confused by maybe

03:33.940 --> 03:37.380
new names that didn't show up in the train data show up in the test data.

03:37.420 --> 03:43.310
So let's create a vocabulary and to do this I'm going to create a new variable called all data and I

03:43.320 --> 03:50.630
was going to set this equal to my test data concatenated with my train data.

03:50.630 --> 03:52.920
Remember test data and train data themselves.

03:52.940 --> 03:57.590
They're just huge lists of tuples where each tuple is three of these.

03:57.650 --> 04:01.870
So what I want to do is just get a giant list with a bunch tuples in it.

04:01.880 --> 04:07.470
So now if I check out my length of all my data it's now eleven thousand.

04:07.700 --> 04:14.660
So what I want to do is essentially use a set in Python to add words to my set.

04:14.870 --> 04:19.000
And that way I can get a sense of all the unique words.

04:19.040 --> 04:23.690
Remember a set in Python is an unordered collection of unique elements.

04:24.320 --> 04:33.070
So essentially what I'm going to do here is I will say for the story the question and the answer in

04:33.550 --> 04:40.240
all data because remember each item here is essentially organized as a tuple of three items.

04:40.240 --> 04:43.510
The question the story and then the answer.

04:43.510 --> 04:50.000
So for the story the question and the answer and all my data I'm going to say the following I'll say

04:50.060 --> 05:03.220
vocab is equal to vocab that union and then I'm going to convert that story into a set.

05:03.220 --> 05:05.680
So let's first see this on an example story.

05:05.680 --> 05:07.660
So remember we have a story right here.

05:07.660 --> 05:11.500
So train data 0 0.

05:11.630 --> 05:13.040
This would be the story.

05:13.040 --> 05:18.630
So if I were to call set on this it would return back.

05:18.710 --> 05:27.920
This set right here so what I'm going to be doing is right before this for loop I'll say vocab is equal

05:27.920 --> 05:34.860
to an empty set and then I'm going to create a set of the story and then set vocab equal to vocab.

05:34.880 --> 05:40.880
The union of the set of the story and in case you're not too familiar with what a union and sets is

05:41.120 --> 05:46.440
there is a link in the notebook that explains it but it's essentially it's going to find all the distinct

05:46.500 --> 05:51.600
elements between the two sets between our current vocabulary and this new story coming in.

05:51.780 --> 05:53.190
So you can check out the link in the notebook.

05:53.190 --> 05:54.230
It looks something like this.

05:54.570 --> 05:55.650
Essentially the union.

05:55.710 --> 05:58.470
So here's the union between three sets A B and C..

05:58.710 --> 06:03.960
It's just going to be where they have all distinct elements in present in all the sets.

06:04.140 --> 06:09.930
Essentially just the simple way of continually adding any unique words and keeping to account the previous

06:09.930 --> 06:11.210
words we had.

06:11.210 --> 06:12.750
So we can say vocab is equal to vocab.

06:12.750 --> 06:21.510
That union that set story and then we'll do the same thing with the same vocab and we'll union with

06:21.510 --> 06:22.760
the set of the question.

06:24.380 --> 06:33.000
Then we're going to add in the two possible answers which are yes or no so say vocab at a no and vocab

06:34.410 --> 06:35.400
and yes.

06:35.430 --> 06:40.720
And now if I check out my vocab here I have a set of all the possible vocab words.

06:40.800 --> 06:45.150
And later on we're gonna be lower casing all of these so proper names will be lowercase.

06:45.150 --> 06:48.290
But in general you can see that there actually aren't that many words.

06:48.420 --> 06:53.280
So later on when we're constructing our own stories and on questions we're going to be limited in what

06:53.280 --> 06:54.900
names and what words we can use.

06:54.900 --> 06:56.570
So keep that in mind.

06:56.640 --> 07:03.060
Now one more thing we have to do for the vocab is need to add one to it for capturing the length because

07:03.060 --> 07:08.080
later on we're going to use carris pad sequences and zero is a placeholder for that.

07:08.130 --> 07:14.910
So I'm going to create one more variable here called the vocab length and set that equal to the length

07:15.000 --> 07:20.430
of this vocab set and then I'm going to add one to it because later on when we use Kerry's pad sequences

07:20.760 --> 07:28.960
we have a little placeholder so we have right now our entire vocabulary and we also know the length

07:28.960 --> 07:30.010
of the vocab plus one.

07:30.100 --> 07:35.900
So essentially thirty seven unique words plus that one place holder that we're going to use later on.

07:35.900 --> 07:43.930
So now what I need to do is figure out how long is the longest story and how long is the longest question.

07:44.050 --> 07:48.140
So the way we can do that is actually not so bad.

07:48.140 --> 07:53.000
What I can say is check the length of data zero.

07:53.120 --> 08:04.980
So this is gonna be calculating the longest story so say check the length the data 0 4 data in all data.

08:05.060 --> 08:08.150
Recall that all data as you go through it.

08:08.240 --> 08:10.520
So for example the very first item here.

08:10.700 --> 08:11.630
Again it's a tuple.

08:11.630 --> 08:13.290
So I'm saying data 0.

08:13.310 --> 08:16.840
So that would be adding in another zero off of this.

08:16.850 --> 08:18.790
So that's going to grab the story right here.

08:18.800 --> 08:22.490
So data 0 4 data and all data.

08:22.490 --> 08:24.170
So for every tuple.

08:24.170 --> 08:29.690
Go ahead and grab that story and then check the length of it and what I'm going to do is simply useless

08:29.690 --> 08:36.890
comprehension to make a list of this and this will then be the links of all the stories so all story

08:38.450 --> 08:44.600
lengths to be equal to that so if I check that out there's a length of all my stories.

08:44.610 --> 08:48.540
Essentially how many words or piece of punctuation that include and what I really want to know is the

08:48.540 --> 08:50.850
maximum length of the story.

08:51.280 --> 08:56.100
And we're gonna need that later on for again padding our sequences so the longer story is a hundred

08:56.100 --> 08:56.790
fifty six.

08:56.790 --> 09:06.190
So let's go ahead and make a variable called Max underscore story underscore Elin is equal to 1 56 and

09:06.190 --> 09:10.180
then we're going to follow the exact same logic for calculating the maximum question length.

09:10.840 --> 09:17.650
So simply say Max question length is equal to the max and then we're going to do our list comprehension

09:17.650 --> 09:23.830
here check the length of data but in this case we'll index that one since that's the index for the story

09:24.300 --> 09:26.890
and they'll say for data and all data.

09:26.890 --> 09:30.390
Be careful with the amount of parentheses and square braces we're using here.

09:30.430 --> 09:31.840
You ever get a typo error.

09:31.840 --> 09:34.790
Go ahead and run a provided notebook directly.

09:35.140 --> 09:40.810
So if we check out our max question length you should get back that six words is the max question.

09:40.810 --> 09:41.350
OK.

09:41.560 --> 09:43.480
So just a quick review of what we did here.

09:43.660 --> 09:45.110
We explored the data a little bit.

09:45.190 --> 09:47.250
Open it up using pixel functionality.

09:47.350 --> 09:53.890
Saw that it was a list where every item in the list is a tuple with three parts the story the question

09:54.310 --> 09:56.740
and then the correct answer a yes or no.

09:56.740 --> 10:01.140
And then we built out a vocabulary using a set and then checking the unions.

10:01.150 --> 10:06.100
We just kept adding more words to the set until we had all the unique words presented throughout the

10:06.100 --> 10:07.640
questions and the stories.

10:07.810 --> 10:13.530
And then we added no one yes because we know those are the only two possible answers and then we were

10:13.530 --> 10:16.910
able to calculate the longest story as well as the longest question.

10:16.950 --> 10:21.690
And we're going to be using that for Kerry's pad sequences once we vector the data which is coming up

10:21.690 --> 10:27.260
next to the next lecture will explore using Kerry's pre processing for padding sequences and the token

10:27.260 --> 10:28.120
Nisar.

10:28.380 --> 10:28.980
I'll see you there.
