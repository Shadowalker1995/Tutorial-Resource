WEBVTT

00:05.280 --> 00:07.010
Welcome back everyone in this lecture.

00:07.020 --> 00:10.810
We're going to go over the solutions for the natural language processing basics assessment.

00:11.010 --> 00:12.060
Let's get started.

00:12.060 --> 00:17.340
OK here we are at the assessment notebook the first we're going to do is run this top cell to perform

00:17.370 --> 00:18.960
our standard imports.

00:18.960 --> 00:24.180
And then we're going to create a document object through the Owl Creek thought tax file so we can say

00:24.180 --> 00:31.720
with open and then we're going to search for it inside the text files folder.

00:31.720 --> 00:34.710
You should see and be able to autocomplete or tab out.

00:34.750 --> 00:44.210
Owl Creek that takes t open as f and we'll say is equal to a.p and then we'll read in the file as a

00:44.210 --> 00:48.830
string and then we can run this cell confirmed that we worked.

00:48.890 --> 00:52.330
Next we ask ourselves how many tokens are contained in the file.

00:52.370 --> 00:56.540
For that we just need actually check the length of the document and we can get four thousand eight hundred

00:56.730 --> 00:58.310
thirty three.

00:58.310 --> 01:01.480
Next question is how many sentences are contained in the file.

01:01.580 --> 01:10.280
So recall that we can build out a list of sentences by saying something like talk sentences is equal

01:10.280 --> 01:16.810
to scent for sense and talk sense.

01:16.950 --> 01:21.430
And then once you run that we can just check the length of sentences.

01:21.540 --> 01:24.900
So you see there's two hundred and eleven sentences inside this document.

01:26.420 --> 01:29.900
Next we want it to print the second sentence in the document.

01:30.200 --> 01:37.700
So only to do is using doc sentences index at 1 since 0 will be the first one will be the seconds and

01:37.700 --> 01:43.720
then we can grab its text and simply print it out.

01:43.870 --> 01:45.040
Should get something like this.

01:45.050 --> 01:48.100
A man stood up upon a real world bridge etc..

01:48.770 --> 01:55.580
Next for each token in the sentence above its text POS had dependency tags and Lema tag lots of different

01:55.580 --> 01:56.410
ways you can do this.

01:56.420 --> 02:03.440
I am actually going to jump ahead to the challenge solution so you could just print out everything as

02:03.440 --> 02:06.910
a tuple or you can format it nicely so it looks something like this.

02:06.920 --> 02:11.610
So let's go ahead and show the challenge solution because it's very similar to the normal solution.

02:11.660 --> 02:19.960
We're just going to say for token in and then here we're going to say Doc sentences and we're going

02:19.960 --> 02:24.030
to say docs and this is one we're just interested in the second sentence.

02:24.160 --> 02:27.950
We'll go ahead and print out using string formatting here.

02:28.880 --> 02:36.810
We'll print out the token text and then we'll print out the token part of speech

02:39.680 --> 02:49.680
the token was make sure it's lower cased token syntactic dependency and then the token lemma.

02:49.710 --> 02:54.070
Now if you just print it like this you'll get something that looks like the answer above.

02:54.120 --> 02:59.690
So we want to format it a little bit so it looks a little nicer by giving some minimum whitespace here.

03:00.150 --> 03:05.640
So let's go ahead and add those extra braces and you can play around his values have to be exactly the

03:05.760 --> 03:07.100
same values I chose here.

03:07.110 --> 03:13.500
But the essentialist give us some spacing some minimum amount of characters that take up so we run that

03:13.550 --> 03:16.610
and now it gets a nice table along with the space.

03:17.030 --> 03:22.500
OK next we wanted to write a metric called Swimming that finds both occurrences of the phrase swimming

03:22.530 --> 03:24.110
vigorously in the text.

03:24.420 --> 03:30.570
So we're going to run and import this matter object and let's create our pattern.

03:30.780 --> 03:36.500
Here's a couple of ways you can do this but probably the easiest way is to first search for the lower

03:36.500 --> 03:42.380
case term swimming and then we're going to look for a space.

03:42.380 --> 03:54.640
So say is space we'll say true and then we're also going to say as an option pass an asterix we're looking

03:54.640 --> 04:02.170
for zero or more times that and then will also say lower and then we're looking for the word that makes

04:02.170 --> 04:04.240
you spell that right vigorously.

04:04.240 --> 04:05.060
The I.

04:05.110 --> 04:10.230
G O R O U S L Y.

04:10.290 --> 04:18.160
And then let's go ahead and say take our matter and add a metric called swimming.

04:18.240 --> 04:24.910
There won't be any callbacks for now and we'll just pass in the pattern to match on.

04:24.990 --> 04:32.290
So if we run that we can say found matches is equal to measure and then we can pass in the entire document

04:33.570 --> 04:36.130
and then we can print out where we actually found the matches.

04:37.990 --> 04:40.920
We can see here it matches the output here.

04:40.930 --> 04:46.030
Next we want to print the text surrounding each of these so we can Orosi the start and end positions.

04:46.030 --> 04:58.300
So we can do is we can create a little function by simply saying the ZF will say surrounding text should

04:58.340 --> 05:06.100
have it be called surrounding and it takes in a document a start and an end.

05:06.410 --> 05:17.820
And what we're going to do is print out the documents and we'll say Star minus let's say 10 words and

05:17.890 --> 05:20.460
end plus five words.

05:20.540 --> 05:24.050
We'll go ahead say minus five words way we don't get a huge sentence.

05:24.050 --> 05:25.120
So I'm going to run that.

05:25.160 --> 05:33.090
And what we're going to do is then we're going to say surrounding for these values right here.

05:33.420 --> 05:36.930
So get a pass on the document that we created and then the start and stop.

05:37.220 --> 05:41.200
And here we can say evade the bullets and swimming vigorously reach the bank.

05:41.210 --> 05:42.390
So that's the first one.

05:42.650 --> 05:46.050
And then the second one is just going to be this period.

05:46.110 --> 05:53.060
So again we say surrounding the dock and then we can see a shoulder he was not swimming vigorously with

05:53.060 --> 05:53.880
the current.

05:53.890 --> 05:57.410
It's up to you how much before start and you want to go.

05:57.520 --> 06:00.740
So it was pretty it took around the each found match for extra credit.

06:00.770 --> 06:03.680
Print the entire sentence that contains each found match.

06:03.890 --> 06:04.940
So it's a little harder.

06:05.010 --> 06:06.390
Let me show you how you can do it.

06:06.590 --> 06:13.500
You can say for sentence in Doc sentences

06:17.120 --> 06:23.570
found match and then we're going to index 0 and off of that will index 1.

06:23.600 --> 06:27.330
So again notice here what's happening when we say found matches.

06:27.380 --> 06:33.450
Let's make sure that's found matches so often found matches we're right now looking at the first one

06:33.540 --> 06:37.340
0 and then we're looking at the start of it 1 2 7 4.

06:37.380 --> 06:39.150
So that's what this is doing right here.

06:39.390 --> 06:47.030
So first sentence in DOCSIS is if the very first start is less than the sentence.

06:47.080 --> 06:54.060
And then we're going to print that sentence.

06:54.240 --> 06:56.980
Let's make sure we say sentence here.

06:57.240 --> 06:59.620
We're going to print that sentence and then break.

06:59.670 --> 07:04.050
So we're going to do is for every single sentence inside a document sentence we're essentially going

07:04.050 --> 07:10.920
to check if found matches 0 1 is less than the end of that sentence.

07:10.920 --> 07:15.090
So when you run this you should get back that entire sentence by diving I could evade the bullets and

07:15.090 --> 07:18.920
swimming vigorously reach the bank take to the woods and get away home.

07:19.170 --> 07:25.050
And then we can just do the same thing for the second match which is essentially just replacing from

07:25.050 --> 07:27.250
zero here to one.

07:27.330 --> 07:30.590
And if you're in that you should see the hunted man saw all this over his shoulder.

07:30.630 --> 07:33.420
He was now swimming vigorously with the current.

07:33.420 --> 07:34.050
All right.

07:34.200 --> 07:34.730
That's it.

07:34.740 --> 07:37.530
If you have any questions feel free to post the Q&amp;A forums.

07:37.560 --> 07:39.350
We'll see you at the next section of the course.
