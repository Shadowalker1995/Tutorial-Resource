WEBVTT

00:03.800 --> 00:09.680
Welcome back to this lecture on vocabulary and matching with Spacey so far we've seen how a body of

00:09.690 --> 00:16.230
text is divided into tokens and how individual tokens are parsed and tagged with parts of speech dependencies

00:16.350 --> 00:18.140
and limitation.

00:18.210 --> 00:23.190
In this lecture we're going to identify and label specific phrases that match patterns we can define

00:23.190 --> 00:24.910
ourselves.

00:25.000 --> 00:29.050
We can think of this as a powerful version of regular expression where we actually take parts of speech

00:29.050 --> 00:31.580
and to account for our pattern search.

00:31.600 --> 00:36.640
Let's explore this concept with Spacey by jumping over to Jupiter notebook or a hearing him in a new

00:36.640 --> 00:39.960
notebook quite important Spacey and loaded the English library as well.

00:40.210 --> 00:45.460
So I want to point out quickly is we have a couple of tables inside the vocabulary and matching notebook

00:45.520 --> 00:47.500
that are going to be really useful free to reference.

00:47.710 --> 00:55.270
If you come back to an LP Python basics and open up vocabulary and matching here and scroll down there's

00:55.270 --> 01:00.400
a couple of tables such as this from right here for additional parameters and quantifiers.

01:00.420 --> 01:03.770
And scroll down here there's other tokened attributes that we're going to talk about.

01:03.880 --> 01:04.890
So we have these tables here.

01:04.900 --> 01:09.160
I encourage you to reference them and we'll jump a little bit back and forth between these two notebooks

01:09.460 --> 01:11.270
to reference some of the code here.

01:11.310 --> 01:13.000
Let's go ahead and get started.

01:13.000 --> 01:15.590
First off we're going to talk about rule based matching.

01:15.790 --> 01:21.850
Spacey offers a rule matching tool called matcher and that allows you to build a library of token patterns

01:22.210 --> 01:28.270
then match those patterns against a doc object to return a list of found matches a very similar idea

01:28.270 --> 01:30.550
to regular expressions that we saw earlier.

01:30.670 --> 01:34.630
They can think of this is kind of a more powerful version of that and you can actually match from any

01:34.630 --> 01:40.540
part of the token including text and annotations and you can add multiple patterns to the same matcher.

01:40.540 --> 01:52.380
Let's show you how to import the natural library will say from speccy dot matcher import matcher and

01:52.380 --> 01:59.430
then we're going to create a mature object by saying matcher and then we pass in the current vocab of

01:59.430 --> 02:01.360
this an LP object.

02:01.500 --> 02:05.220
So we say matter is equal to matter passing in an LP that vocab.

02:05.220 --> 02:10.380
So here matter is an object that pairs the current vocab object and we can add or remove specific names

02:10.440 --> 02:12.600
matchers to match her as needed.

02:12.600 --> 02:15.690
So we're going to take this matter object and then add or remove to it.

02:16.020 --> 02:19.020
So it's time to find patterns.

02:19.080 --> 02:22.530
So we need to create patterns that we actually want to match on.

02:22.710 --> 02:25.980
And the way this works in fact will create several patterns.

02:25.980 --> 02:27.770
So say pattern one for the first one.

02:27.930 --> 02:33.120
The way this works so spacey is you have a list and you're going to provide essentially a series of

02:33.210 --> 02:35.860
dictionaries into this list.

02:35.880 --> 02:40.950
So the first one we're going to say the key is lower.

02:41.190 --> 02:45.360
And then the value is solar power.

02:45.360 --> 02:51.150
So we're going to read 8 documents or a string in and we're going to try to find solar power and solar

02:51.150 --> 02:54.450
power can appear in the following ways.

02:54.720 --> 03:02.870
We wanted to test it if it appears as one word if it appears with a dash in the middle or if it just

03:02.870 --> 03:05.180
appears as two words.

03:05.180 --> 03:06.560
So solar power.

03:06.560 --> 03:09.230
Single word solar power or a dash or solar power.

03:09.230 --> 03:12.900
Two words we're basically going to try to protect all three of these patterns.

03:13.100 --> 03:17.900
So for the first pattern here we're just detecting if you transform that tokens to all lowercase.

03:18.020 --> 03:19.730
Does it match to solar power.

03:21.160 --> 03:25.600
The second pattern that we're looking for is the one with some sort of punctuation like a dash in the

03:25.600 --> 03:26.290
middle.

03:26.680 --> 03:35.410
So the way that one's going to work is the following will say lower for the term solar comma.

03:35.540 --> 03:43.370
The next dictionary inside of this list is going to be if a key is underscore punk.

03:43.590 --> 03:45.370
And let's make sure that's all capitalized.

03:45.390 --> 03:49.800
So that sense for is punctuation colon will pass in the boolean true.

03:50.010 --> 03:56.220
That's basically asking is this token lowercase Soler then is there punctuation and then we're going

03:56.220 --> 04:02.160
to pass in one more dictionary with lower as a key and then we're going to ask is the lowercase equal

04:02.160 --> 04:03.080
to power.

04:03.300 --> 04:08.190
So this is actually going to find various different types of punctuations in between solar and power

04:08.250 --> 04:11.850
not just the hyphen.

04:11.930 --> 04:13.370
So now pattern three.

04:13.580 --> 04:18.330
Let's go ahead and just say lower.

04:18.570 --> 04:19.650
Should we spell that right.

04:20.510 --> 04:31.070
Is lower equal to solar and then is the token immediately following this when it's lowercase is that

04:31.190 --> 04:33.460
the string power.

04:33.770 --> 04:39.140
So here we're not able to the text for various use cases and I'm going to kind of match them up here

04:39.560 --> 04:46.980
so it's able to tacts the one word pattern that's pattern one pattern to is able to the texts Soler

04:47.040 --> 04:52.980
than some punctuation and then lowercase power and then pattern 3 is able to text the word solar space

04:53.100 --> 04:54.250
and then power.

04:54.270 --> 04:58.770
So we have these three patterns that we want to match on and you can check out again the tables on this

04:58.770 --> 05:04.410
vocab and matching as well as it links the documentation in order to figure out what you want to provide

05:04.420 --> 05:05.850
in as keys.

05:06.000 --> 05:11.580
So you can scroll down here and we have various parameters and if you keep scrolling down you can see

05:11.580 --> 05:16.620
the attributes so we have lower which is in our case the lower case form of the token text because so

05:16.620 --> 05:19.260
much on things like the length is alpha.

05:19.310 --> 05:20.460
Is it punctuation.

05:20.550 --> 05:22.980
Is it like a L or like an e-mail.

05:23.130 --> 05:24.540
Things are parts of speech.

05:24.570 --> 05:26.900
Delimitation the shape and so on.

05:26.910 --> 05:30.870
So it's actually lots of the attributes can provide into this dictionary but the really common ones

05:30.960 --> 05:36.120
specifically are lower and you can also do verbatim if you want to keep capitalisation in play.

05:36.240 --> 05:41.640
Maybe looking for a difference between Tesla if a capital-T as a company versus Tesla a lowercase t

05:41.940 --> 05:44.660
as the actual Tesla car.

05:44.880 --> 05:46.350
Anyways we have these three patterns.

05:46.380 --> 05:48.760
Now it's time to add them to our matcher.

05:48.810 --> 05:56.340
So the way this works is we simply say matter and then we're going to add N and you first name the actual

05:56.340 --> 05:56.960
matcher.

05:56.970 --> 06:03.300
So we're going to name this matcher or solar power matcher and then as a third parameter or a second

06:03.300 --> 06:05.320
parameter we passen none.

06:05.490 --> 06:10.530
So let's say callbacks parameter and you can shift tab here to actually see different parameters.

06:10.530 --> 06:13.160
So you can expand on this and check out the parameters.

06:13.260 --> 06:14.380
But we're going to do it here.

06:14.440 --> 06:18.820
Exit Out of that is set callbacks equal to none.

06:18.830 --> 06:21.060
So we'll talk about more about callbacks later on.

06:21.170 --> 06:23.800
And then we just pass in the patterns who want to match on.

06:23.810 --> 06:29.290
So just keep passing them patterns so pattern one pattern to pattern three.

06:29.540 --> 06:34.940
So now these three particular patterns have been added to this matching object and they're under the

06:34.940 --> 06:36.920
name solar power.

06:36.920 --> 06:40.850
And you can definitely provide this name whatever you want but it should be relevant to whatever you're

06:40.850 --> 06:43.790
trying to match on.

06:43.800 --> 06:49.320
So now that we have this solar power matcher Let's go ahead and create a document and see if we're able

06:49.320 --> 06:52.190
to match on these various phrases.

06:52.220 --> 06:54.680
So as Ina goes on to say the following.

06:54.740 --> 07:08.180
Say the solar power industry continues to grow as solar power increases and then also say solar power

07:08.840 --> 07:10.540
is amazing.

07:10.590 --> 07:13.710
So notice here we have solar power and I has three different versions of it.

07:13.730 --> 07:17.870
I have solar power as two separate words right after each other solar power as one word.

07:17.870 --> 07:20.240
And then solar power has a hyphenated word.

07:20.270 --> 07:24.150
We're going to run this and then to actually find the matches.

07:24.180 --> 07:29.620
You simply take the matter and then pass in that dock or document object.

07:29.820 --> 07:33.800
And we're going to set a variable called found matches equal to this matcher object.

07:33.810 --> 07:40.410
What it returns and what's nice here is I can simply print out my found that matches and it's going

07:40.410 --> 07:43.850
to return back to apples with three pieces of information.

07:43.890 --> 07:46.700
The first piece of information is the match ID.

07:46.740 --> 07:54.210
Essentially the string ID for the particular match and then it indicates the start and the stop and

07:54.210 --> 07:57.210
notice here the start and the stop is really on the tokens.

07:57.210 --> 08:03.450
So we have the first token the index 0 is the and then the second token the next one is Soler.

08:03.450 --> 08:09.030
So for example solar power here is the first match and it's going from one up tube not including three.

08:09.030 --> 08:12.910
So it's basically these two words index one and the next two.

08:13.170 --> 08:18.000
And if you check out the actual vocabulary and matching notebook and scroll down past's example aren't

08:18.000 --> 08:20.960
creating patterns and applying it to the dock object.

08:20.970 --> 08:25.110
We have this nice little for loop here that will actually print out the string representation if you

08:25.110 --> 08:25.550
want.

08:25.590 --> 08:28.500
So let me copy this and kind of explain what's going on.

08:28.500 --> 08:35.760
So I'm going to copy that and paste it here and what this does is it looks up the actual match your

08:35.760 --> 08:42.570
ID prints out the match matcher name the start the end and then print out the actual text.

08:42.630 --> 08:47.450
So kind of a nice little way of printing out everything but essentially it's the same information here

08:47.760 --> 08:49.800
plus the name of the matter object.

08:49.800 --> 08:56.430
Solar power which we defined up here when we added the matter and then the actual text that's matching.

08:56.430 --> 09:00.210
So just a little functionality here in case you find the need to use it.

09:00.630 --> 09:05.760
Now you can make token rules optional by passing and O.P. Asterix argument.

09:05.880 --> 09:08.980
So that lets us streamline our patterns list so mishu.

09:09.020 --> 09:16.940
What I mean by that I'm going to create a new set of patterns we will say pattern one and effect before

09:16.940 --> 09:20.790
we do this let's actually show you how to remove a particular pattern.

09:20.810 --> 09:26.000
Let's say you no longer were interested in this solar power matcher and you were interested in any of

09:26.000 --> 09:30.400
these old patterns anymore you wanted a full update instead of adding to the matcher.

09:30.410 --> 09:37.610
You can actually remove from the matcher so you can simply say take that matcher and remove whatever

09:37.610 --> 09:38.770
he happened to call the matcher.

09:38.780 --> 09:41.500
In our case we called it solar power.

09:41.690 --> 09:44.020
So I'm going to remove that.

09:44.390 --> 09:50.000
So now that we've removed this old set of patterns for the matter let's go ahead and create a new set

09:50.000 --> 09:54.380
of patterns we will say pattern one is equal to.

09:54.500 --> 09:56.960
And we're going to something really similar to what we had before.

09:57.050 --> 09:59.030
Lower as the key.

09:59.030 --> 10:05.840
And then solar power as the value and then for pattern to what we're going to do is a little different

10:05.950 --> 10:10.160
will say lower is solar.

10:10.430 --> 10:20.140
For the first term and then we're going to look for is underscore the NCT for his punctuation set that

10:20.170 --> 10:25.870
the true and true as a boolean and also inside his dictionary.

10:25.960 --> 10:32.880
We're going to set O.P. colon and then set that as an asterix for the string.

10:32.890 --> 10:38.550
And what that's going to allow us to do is allow this pattern to match zero or more times.

10:38.590 --> 10:43.510
And if you check out again the vocabulary and matching We have a little table of additional parameters.

10:43.540 --> 10:46.290
So you can negate the pattern make the pattern optional.

10:46.300 --> 10:51.460
So that's a question mark required pattern to match one or more times allow the pattern to match zero

10:51.460 --> 10:52.510
or more times.

10:52.540 --> 10:57.960
So that can help us if we have like double hyphens instead of just a single piece of punctuation.

10:58.180 --> 11:03.700
So we're going to say as little operator there that we can allow the pattern to match zero or more times.

11:03.820 --> 11:10.580
And then we're going to add and finally lower on power.

11:10.580 --> 11:11.380
So you run that.

11:11.480 --> 11:17.390
And let's go ahead now add in that we're going to call it solar power as we did before.

11:17.390 --> 11:23.630
Make sure you remove the old solar power set and we won't have any callbacks for this particular instance

11:23.810 --> 11:30.000
and we'll pasand these new updated patterns pattern one and pattern to again just to clarify here.

11:30.020 --> 11:34.850
Pattern one is going to be able to find solar power put together as all lowercase.

11:35.000 --> 11:42.110
So you can grab solar power like this or solar power with S&amp;P capitalized pattern too is going to grab

11:42.110 --> 11:45.570
solar and then any amount of punctuation.

11:45.590 --> 11:51.500
That's what the Asterix is doing with the O.P. so it can be double dashes or can be one underscore or

11:51.500 --> 11:56.630
one plus or whatever it happens to be punctuation and then power.

11:56.630 --> 11:58.520
So that's really powerful.

11:58.520 --> 12:05.450
So add that in as our new solar power matching and let's create a new documents we'll say Doc two is

12:05.450 --> 12:21.870
equal to an LP and we're going to say something like solar powered power is solar power Yeah or really

12:21.880 --> 12:22.510
whatever you want.

12:22.510 --> 12:27.580
The key thing here is I want to show you that it's going to be able to actually grab these two hyphens

12:27.640 --> 12:29.800
because we added in this optional parameter

12:32.840 --> 12:40.080
so from matcher we're going to say actually we're going to say found underscore match's is equal to

12:40.140 --> 12:41.040
matter.

12:41.070 --> 12:49.110
We're going to pasan dock to run that and then you can print out your found matches and if found two

12:49.110 --> 12:54.260
matches found the first one at solar power or solar or dash dash power and this one put together at

12:54.270 --> 12:55.150
solar power.

12:55.350 --> 13:00.870
So now these two pattern lines actually replace what we had here as the original three because going

13:00.870 --> 13:05.660
to be able to detect both pattern to pattern through here because of this.

13:05.730 --> 13:09.810
If we scroll down here this optional parameter because the Asterix is actually for come back to this

13:09.810 --> 13:10.370
table.

13:10.520 --> 13:13.770
It's allowing the pattern to occur zero or more times.

13:15.150 --> 13:15.840
OK.

13:16.020 --> 13:20.540
Now we've learned how to actually create our own patterns and match on them using Spacey.

13:20.610 --> 13:25.230
And the main things to cover from this lecture that are important is to understand the space to that

13:25.230 --> 13:26.640
matter in this matter.

13:26.810 --> 13:29.430
You pass in your vocab into the matter.

13:29.460 --> 13:34.950
You create patterns which are list of dictionaries based off key words in the terms you're looking for.

13:34.950 --> 13:39.870
And you can check out the actual tables we provide for you inside of our notebook if you scroll down

13:40.290 --> 13:45.720
you'll see some tables for the options key as well as tables for all the attributes you can search on

13:45.960 --> 13:47.300
and what they should match to.

13:47.370 --> 13:51.900
And if you scroll all the way down we actually have a link to documentation that goes over the official

13:51.930 --> 13:54.140
sections for rule based matching.

13:54.150 --> 13:58.770
So if you check that out you can scroll down here and there's tons of different examples as well as

13:58.890 --> 14:02.390
similar tables to what we provide for you in the notebook.

14:02.400 --> 14:02.940
OK.

14:03.090 --> 14:05.100
Came back to her notebook when you have those patterns.

14:05.190 --> 14:09.600
Add them to the match or given a name that you provide and they just pass in whatever doc objects you

14:09.600 --> 14:12.920
have into this matter and it reports back to found matches.

14:12.990 --> 14:16.420
And we also showed you how you can actually grab the raw text for the match itself.

14:16.440 --> 14:23.010
Coming up next we're going to talk about trying to match on limitation and also trying to match phrases

14:23.070 --> 14:25.200
and viewing those matches themselves.

14:25.200 --> 14:26.960
We'll be right back with part two.
